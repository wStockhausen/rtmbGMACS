A NOTE on mirroring, fixing, and putting bounds on parameters in RTMB
--see files in testing/RTMB_Capabilities/ParametersMap_And_BoundsExample

Mirroring or fixing parameters within a parameter vector ("p", say)is done by creating a list ("map", say)
with an element with the same name as the parameter which is a factor vector with the same
number of elements as in the parameter vector and levels from 1:length(p). Thus
    map=list(p=factor(1:length(p)))
This is included when MakeADFun'ing the model by specifying
    model = MakeADFun(objfun,parameters,map=map,...),
where `objfun` is the objective function, `parameters` is the parameters list (with `p` as an element),
and `map` is the list above. Only elements of parameters specified in `map` can be mirrored or fixed.

Mirroring and fixing
To "mirror" parameter values within "p", simply change the level for each of the mirrored elements
to the same level. Thus,
    map=list(p=factor(1,2,1,2))
will mirror the 1st and 3rd elements as one parameter and the 2nd and 4th elements as another parameter,
essentially reducing the parameter vector "p" to a two-element vector, which is what is actually returned
in the model parameter list.

To fix an element's value to its initial value, simply assign "NA" to the level of the element when
creating the factor in the map. This needs to be done when creating the factor, not after creation--
see https://mail.google.com/mail/u/0/?shva=1#inbox/KtbxLwghhxtwvVMtJccgJzWTvkSnQhmQzg


Bounds
Bounds are placed on a parameter when optimizing not model, not when MakeADFun'ing it.
Using the optimizer `nlminb`, the lower and upper bounds are specified as values of
the `lower` and `upper` function arguments. The values are replicated to be "as long as
`start`", the vector of initial parameter values.

From the run_map_example, it looks like bounds can't be placed on random effects.

Given RTMB's strategy for mirroring and fixing parameters, some care needs to be
taken with creating the vectors specifying the upper and lower bounds.


