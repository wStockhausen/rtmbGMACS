% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readParamInfo_Allometry.R
\name{readParamInfo_Allometry}
\alias{readParamInfo_Allometry}
\title{Read allometry info}
\usage{
readParamInfo_Allometry(conn, verbose = FALSE)
}
\arguments{
\item{conn}{\itemize{
\item connection (or filename) to read from
}}

\item{verbose}{\itemize{
\item flag to print extra info
}}
}
\value{
nested list with elements (see \strong{Details})
}
\description{
Function to read allometry info.
}
\details{
If \code{option} = "function", the returned list has elements
\itemize{
\item{option}
\item{Fcns - list with elements}
\itemize{
\item{n - number of functions defined}
\item{dfr - dataframe with function specs}
\item{reflvls - list with number of reference levels definied (\code{n}) and a dataframe with the levels (\code{dfr})}
}
\item{MPs - list with main parameters info; elements are}
\itemize{
\item{n - number of main parameters defined}
\item{dfr - dataframe with main parameters specs}
}
\item{OPs - list with offset parameters info; elements are}
\itemize{
\item{n - number of offset parameters defined}
\item{dfr - dataframe with offset parameters specs}
}
\item{DPs - list with devs parameters info; elements are}
\itemize{
\item{n - number of dev parameters defined}
\item{dfr - dataframe with dev parameter specs}
\item{reflvls - list with number of reference levels defined (\code{n}) and a dataframe with the levels (\code{dfr})}
}
\item{ECs - list with environmental covariates info; elements are}
\itemize{
\item{n - number of environmental covariates defined}
\item{dfr - dataframe with environmental covariates specs}
\item{reflvls - list with number of reference levels defined (\code{n}) and a dataframe with the levels (\code{dfr})}
}
\item{FPs - list with functional priors info; elements are}
\itemize{
\item{n - number of functional priors defined}
\item{dfr - dataframe with functional priors specs}
}
}

If \code{option} = "data", a list with the following elements is returned:
\itemize{
\item{option}
\item{transform - name of function to transform input values to kg}
\item{dfr - dataframe with value specs }
}
}
\examples{
# example code reading "vertical" data format
if (FALSE){
  conn="inputSpecs_Allometry.data_vertical.txt";
  lstResults = readParamInfo_Allometry(conn,verbose=TRUE);
}

# example code reading "horizontal" data format
if (FALSE){
  conn="inputSpecs_Allometry.data_horizontal.txt";
  lstResults = readParamInfo_Allometry(conn,verbose=TRUE);
}

}
