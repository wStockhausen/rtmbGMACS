---
title: "Model Functions and Parameters"
author: "William Stockhausen"
crossref: 
  fig-title: Figure
  tbl-title: Table
comment: "#>"
collapse: true
toc: true
format: 
  html: 
    html-math-method: mathjax
tbl-cap-location: top
fig-cap-location: bottom
prefer-html: true
keep-md: false
keep-yaml: false
echo: false 
---

<!--NOTE: for scalar variables,    use: *var*   (italics)  
          for vectors/matrices,etc use: ***V*** (bold-italics) 
          for functions            use: **fcn** (bold) 
          for verbatim code        use: `code` 
-->

```{r setup,echo=FALSE}
  suppressPackageStartupMessages(require(RTMB));
  suppressPackageStartupMessages(require(rtmbGMACS));
  suppressPackageStartupMessages(require(ggplot2));
```

## Model processes, functions and parameters

rtmbGMACS can encapsulate the following population- and observation-related processes 
in a model:

  - initial abundance
  - allometry (weight-at-size)
  - recruitment
  - natural mortality
  - growth 
  - maturation 
  - size-specific functions (e.g., selectivity and retention)
  - fishing mortality 
  - survey catchability 
  - movement (TBD?)

Each of these processes can be included in the final model using selections among 
a number of possible functional forms, each with associated parameters defined using 
a hierarchical structure. In this hierarchical structure, "top-level" parameters 
can be fixed or estimated as fixed effects and time-variation 
can be added through annually-varying offsets (as fixed or random effects) which 
can, in turn, be linear functions of environmental covariates.

## CTL file syntax (UNDER DEVELOPMENT)

Both functions and parameters for all processes are defined in the "CTL" file 
(the actual filename of which is arbitrary). The CTL file is a text file: comments 
follow a "#" symbol while function and parameter specifications are made using 
white space-delimited tables with a header line with column names and a 
final line specifying "END TABLE". Sections defining individual processes are 
delimited by a line starting with the name of the process to be defined (e.g. 
"RECRUITMENT") and a line indicating the end of the process definition (e.g., 
"END RECRUITMENT").

### Function and parameter specification 

Functions and parameters within a process definition section are defined using 
table structures that are read in as tibbles. 

#### Functions

Function tables start a header line with a `fcn_id` column 
followed by other column names specific to the process being defined, ending with 
a `label` column. Rows following the header line specify the functions that combine 
to define the process for a specified time block and (possibly) combination of population 
classes. @tbl-Ex1 provides an example table for the recruitment process.

|fcn_id | time_block |sex   |size_fcn  | max size|rec_type |label|
|:---:|:----------:|:----:|:--------:|:-------:|:-------:|:----|
|  1  | 2001:2005  |all   | gamma    |  50     |noSR1    |basic_rec|
|  2  | 2006:2023  |male  | gamma    |  50     |noSR1-RW |male_rec2006+|
|  3  | 2006:2023  |female | gamma   |  45     |noSR1-RW |female_rec2006+|
:Example table of function definitions for the recruitment process. {#tbl-Ex1}

In the table, `fcn_id` provides a unique row reference to refer back to a function 
definition, `time_block` specifies the years to which the definition applies, 
`sex` specifies the sex to which it applies, etc. The columns `fcn_id` and `label` 
must be present in each function definition table, but otherwise the column names 
are specific to the process in question. Additionally, the columns may be in any order.

#### Parameters

The parameters associated with each function defined in the function definitions 
table are defined in a hierarchical set of tables either as 

$$p_{t,c} = p_{t_{ref},c} + \delta p_{t,c} + \left[ \sum_{e} \alpha_{e} \cdot v_{e,t} + \beta_e \right] $$ {#eq-Eq1}

or 

$$p_{t,c} = p_{t_{ref},c} + s \cdot \sum_{t'=t_{ref}+s}^t\delta p_{t',c} + \left[ \sum_{e} \alpha_{e} \cdot v_{e,t} + \beta_e \right] $$ {#eq-Eq2}

In @eq-Eq1, the $\delta p_{t,c}$ are annual offsets to $p_{t_{ref},c}$ with $\delta p_{t_{ref},c}=0$ while $s$ in @eq-Eq2 is $sgn(t-t_{ref})$ and the $\delta p_{t,c}$ are annual random walk innovations. The $\delta p_{t,c}$ can be either fixed or random effects. The effect of 
any environmental covariates is modeled as a sum over individual linear effects, the $\alpha_{e}$ and $\alpha_{e}$ are the (potentially) estimable fixed effects and $v_{e,t}$ represents the value at time $t$ of the *e*-th covariate.

##### Reference-level parameters

The reference-level parameters are defined in tables similar to @tbl-Ex2, which is an example that defines 
the $\alpha$ and $\beta$ parameters for the recruitment-at-size gamma functions from @tbl-Ex1.

|fcn_id|param|par_id|ref_time|scale|units|ival|lb|ub|phz|pr_type|p1|p2|offsets|covars|label|
|:-----:|:------:|:---:|:---------:|:-----:|:------:|:----:|:---:|:----:|:-----:|:----:|:---:|:---:|:--------:|:-------:|:------|
|1|alpha|1|NA|ln|none|9.33|2.7|56|5|none|0|0|no|e1,e2|alpha1|
|1|beta|2|2001|ln|none|3.86|1|3.9|5|none|0|0|yes|NA|beta1|
|2|alpha|3|2006|ln|none|9.33|2.7|56|5|none|0|0|no|e1,e2|alpha2|
|2|alpha|4|2011|ln|none|9.33|2.7|56|5|none|0|0|yes|NA|alpha3|
|2|beta|5|2006|ln|none|3.86|1|3.9|5|none|0|0|no|NA|beta2|
|3|alpha|-3|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|
|3|beta|-2|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|
:Example table of reference-level parameters. {#tbl-Ex2}
  
In @tbl-Ex2: 

  - `fcn_id` identifies a row in the function definition table
  - `param` identifies the name of the relevant parameter being specified
  - `par_id` associates a unique positive integer with the parameter, or a 
  negative value indicating substitution with the parameter associated with the positive value 
  - `ref_time` identifies the reference time for parameters with a hierarchical structure
  - `scale` indicates the scale used to specify the initial value, bounds, and prior 
  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)
  - `units` indicates any units associated with the initial value, bounds, and prior
  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds
  - `phz` identifies the estimation phase in which the parameter should be "turned on" (never estimated if < 0)
  - `pr_type` specifies the prior probability function associated with the estimated parameter
  - `p1`,`p2` specify parameter values for the prior
  - `offsets` indicates whether annually-varying offset parameters (i.e., the $\delta p_{t,c}$) should be associated 
  with the reference parameter
  - `covars` specifies the covariates (if any) text string to associate with the reference parameter as a comma-delimited
  - `label` specifies a specific label to use for the parameter

The columns may be in any order, but (unlike a function definition table) all columns should be present.

##### Parameter offsets

If parameter offsets are defined for any reference parameter, then a table defining these offsets needs to follow the 
table defining the reference parameters. The annually-varying parameter offsets (i.e., the $\delta p_{t,c}$) are defined 
in tables similar to @tbl-Ex3, which follows on from @tbl-Ex2:

|par_id|off_id|time_block|param|scale|units|phz|off_type|RE|ival|pr_type|p1|p2|label|
|:----:|:----:|:--------:|:-----:|:------:|:----:|:---:|:---:|:----:|:-----:|:----:|:---:|:---:|:-------:|
|2|1|2001:2005|beta|ar|none|5|offset|no|0|normal|0|1|dvs_beta|
|4|2|2011:2023|alpha|ar|none|5|RW|no|0|normal|0|1|rw_alpha|
:Example table of offset-level parameters. {#tbl-Ex3}

In @tbl-Ex3:

  - `par_id` identifies a row in the reference parameters definition table
  - `off_id` associates a unique positive integer with the parameter, or a 
  negative value indicating substitution with the parameter associated with the positive value 
  - `time_block` identifies the time block across which the offset parameters are defined
  - `param` indicates the name of the associated reference parameter (provides error checking; it should be redundant with par_id)
  - `scale` indicates the scale used to specify the initial value, bounds, and prior 
  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)
  - `units` indicates any units associated with the initial value, bounds, and prior
  - `phz` identifies the estimation phase in which the parameter should be "turned on" (never estimated if < 0)
  - `off_type` identifies the offset type ("offset" or "RW", implying @eq-Eq1 or @eq-Eq2)
  - `RE` is a flag to regard the offsets as random effects
  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds (the latter two are not included in the example)
  - `pr_type` specifies the prior probability function associated with the estimated offsets
  - `p1`,`p2` specify parameter values for the prior
  - `label` specifies a specific label to use for the parameter
  
The columns may be in any order, but (unlike a function definition table) all columns should be present.

##### Covariates

If covariates are defined for any reference parameter, then a table defining the associated parameters needs to follow the 
table(s) defining the reference parameters and any offset parameters. The annually-varying covariate effects (i.e., the 
$\alpha_e \cdot v_{e,t} + \beta_e$) are defined for the reference parameters in tables similar to @tbl-Ex4, which follows 
on from @tbl-Ex2:

|par_id|cov_id|covar|time_block|param|scale|units|phz|RE|ival|pr_type|p1|p2|label|
|:------:|:---:|:---:|:---------:|:-----:|:------:|:----:|:---:|:---:|:----:|:-----:|:----:|:---:|:--------:|
|1|1|e1|2001:2005|cov_alpha|ar|none|5|no|0|normal|0|1|cov_alpha_e1|
|1|2|e1|2001:2005|cov_beta|ar|none|5|no|0|normal|0|1|cov_beta_e1|
|1|3|e2|2001:2005|cov_alpha|ar|none|5|no|0|normal|0|1|cov_alpha_e2|
|1|4|e2|2001:2005|cov_beta|ar|none|5|no|0|normal|0|1|cov_beta_e2|
:Example table of covariate-level parameters. {#tbl-Ex4}

In @tbl-Ex4:

  - `par_id` identifies a row in the reference parameters definition table
  - `cov_id` associates a unique positive integer with the covariate parameter, or a 
  negative value indicating substitution with the parameter associated with the positive value 
  - `covar` indicates the name of the associated covariate
  - `time_block` identifies the time block across which the covariates are applied
  - `param` indicates the name of the covariate-level parameter
  - `scale` indicates the scale used to specify the initial value, bounds, and prior 
  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)
  - `units` indicates any units associated with the initial value, bounds, and prior
  - `phz` identifies the estimation phase in which the parameter should be "turned on" (never estimated if < 0)
  - `RE` is a flag (yes/no) to regard the offsets as random effects
  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds (the latter two are not included in the example)
  - `pr_type` specifies the prior probability function associated with the estimated offsets
  - `p1`,`p2` specify parameter values for the prior
  - `label` specifies a specific label to use for the parameter

## Initial abundance {#sec-InitAbd}

## Allometry {#sec-Allom}

## Recruitment {#sec-Rec}

## Natural mortality {#sec-NatM}

## Growth {#sec-Grw}

## Maturity {#sec-Mat}

## Selectivity {#sec-Sel}

A number of 1-dimensional functions, listed in the subsections below, can be used to describe size-specific fishery or survey catchability, as well as fishery retention, by fleet and population categories. All have the the signature 

$$ s = fcn(z,params,consts,debug=FALSE) $$ 

where `s` is an advector with the same number of elements as the vector `z`, representing the selectivity at 
the values of the vector `z`, `fcn` is the function, `params` is an advector representing the function parameters, 
and `consts` is a vector representing any required constants.

```{r}
#--define size bins
z = seq(25,180,by=5);
```

### Logistic functions {#sec-LogisticFunctions}

Several logistic selectivity functions reflecting different parameterizations are available, including the `asclogistic`, `asclogistic1`, `asclogistic5095`, and `asclogistic50D95` functions. For each, `consts[1]` indicates the size at full selection if > 0, that no rescaling will be done if = 0, or that the values should be normalized by the maximum if < 0. Other elements of `consts` are ignored.

#### Ascending logistic (alternative 1)

The `asclogistic` function is parameterized by the size and width (1/slope) at 50% selected ([@fig-AscLogistic1]). 

```{r}
#| label: fig-AscLogistic1
#| results: hide
#| fig-cap: "Ascending logistic function `asclogistic` (green dotted line) selectivity function parameterized by the size and slope at 50% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. Here, `params`= (100,0.05) and consts = 125."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: asclogistic(z,p,refZ)----
  params = c(100.00,  #--size at which selectivity = 0.50 (logit-scale mean)
               0.05); #--width (1/slope) at z50
  refZ  = 125;        #--reference *size*
  #--set `f` to function in global environment to be tested
  compareSelFun(asclogistic,z,params,refZ,title="asclogistic(z,p,refZ)");
```

#### Ascending logistic (alternative 2)

The `asclogistic1` function is parameterized by the size and width (1/slope) at 50% selected ([@fig-AscLogistic2]). 

```{r}
#| label: fig-AscLogistic2
#| results: hide
#| fig-cap: "Ascending logistic function `asclogistic1` (green dotted line) selectivity function parameterized by the size and width (1/slope) at 50% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. Here, `params`= (100,50) and consts = 125."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: asclogistic1(z,p,refZ)----
  params = c(100,   #--size at which selectivity = 0.50 (logit-scale mean)
              50); #--width (1/slope) at z50
  refZ  = 125;       #--reference *size*
  #--set `f` to function in global environment to be tested
  compareSelFun(asclogistic1,z,params,refZ,title="asclogistic(z,p,refZ)");
```

#### Ascending logistic (alternative 3)

The `asclogistic5095` function is parameterized by the sizes at 50% and 95% selected ([@fig-AscLogistic3]). 

```{r}
#| label: fig-AscLogistic3
#| results: hide
#| fig-cap: "Ascending logistic function `asclogistic5095` (green dotted line) parameterized by sizes at 50% and 95% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. Here, `params`= (50,125) and consts = 0."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: asclogistic5095(z,p,refZ)----
params = c( 50,  #--size at which selectivity = 0.50 (logit-scale mean)
           125); #--size at which selectivity = 0.95
refZ  = 0;       #--reference *size*
#--set `f` to function in global environment to be tested
compareSelFun(asclogistic5095,z,params,refZ,title="asclogistic5095(z,p,refZ)");
```

#### Ascending logistic (alternative 4)

The `asclogistic50D95` function is parameterized by the size at 50% and the difference between the 95% and 50% selected sizes ([@fig-AscLogistic4]). 

```{r}
#| label: fig-AscLogistic4
#| results: hide
#| fig-cap: "Ascending logistic function `asclogistic50D95` (green dotted line) parameterized by the size at 50% and the difference between the 95% and 50% selected sizes. Here, `params`= (50,75) and consts = 0."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: asclogistic50D95(z,p,refZ)----
params = c( 50,  #--size at which selectivity = 0.5 (logit-scale mean)
            75); #--difference between sizes at 95% and 50%-selected
refZ  = 0;       #--reference *size*
#--set `f` to function in global environment to be tested
compareSelFun(asclogistic50D95,z,params,refZ,title="asclogistic50D95(z,p,refZ)");
```

### Ascending normal functions {#sec-AscNormalFunctions}

Several functions can be used to define a selectivity curve using the ascending portion of a normal (gaussian) curve and a sill. An ascending normal selectivity curve has an advantage over a logistic curve in an AD setting because it achieves its maximum (1) at a finite size, whereas logistic functions only approach their maximum values asymptotically. Functions defined include: `ascnormal1`, `ascnormal2`, `ascnormal2a`, `ascnormal2b`, `ascnormal3`.

#### Ascending normal (alternative 1)

The `ascnormal1` function is parameterized by the width of the ascending limb and the size at which it reaches 1 ([@fig-AscNormal1]). 

```{r}
#| label: fig-AscNormal1
#| results: hide
#| fig-cap: "Ascending normal function `ascnormal1` (green dotted line) selectivity function parameterized by the width of the ascending limb and the size at which it reaches 1. `consts` is ignored, but must a dummy value must be given. Here, `params`= (25,100) and consts = 50."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: ascnormal1(z,p,refZ)----
  params = c(25,   #--width of ascending limb
             100);  #--size at which ascending limb reaches 1
  refZ  = 50;       #--reference *size* (ignored here)
  #--set `f` to function in global environment to be tested
  compareSelFun(ascnormal1,z,params,refZ,title="ascnormal1(z,p,refZ)");
```

#### Ascending normal (alternative 2)

The `ascnormal2` function is parameterized by the value of selectivity at the reference size (`refZ`) and size at which ascending limb reaches 1 ([@fig-AscNormal2]). `refZ` is specified by `consts[1]`.

```{r}
#| label: fig-AscNormal2
#| results: hide
#| fig-cap: "Ascending normal function `ascnormal2` (green dotted line) selectivity function parameterized by the value of selectivity at the reference size (`refZ`) and size at which ascending limb reaches 1. `consts[1]` = `refZ`. Here, `params`= (0.5,100) and consts (`refZ`) = 50."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: ascnormal2(z,p,refZ)----
  params = c(0.5,   #--selectivity at size = refZ
             100);  #--size at which ascending limb reaches 1
  refZ  = 50;       #--reference *size*
  #--set `f` to function in global environment to be tested
  compareSelFun(ascnormal2,z,params,refZ,title="ascnormal2(z,p,refZ)");
```

#### Ascending normal (alternative 3)

The `ascnormal2a` function is parameterized by the size at which selectivity reaches `refS` and the size at which the ascending limb reaches 1 ([@fig-AscNormal3]). `consts[1]` = `refS`, the reference selectivity.

```{r}
#| label: fig-AscNormal3
#| results: hide
#| fig-cap: "Ascending normal function `ascnormal2a` (green dotted line) parameterized by the size at which selectivity reaches `refS` and the size at which the ascending limb reaches 1. `consts[1]` = `refS`, the reference selectivity. Here, `params`= (50,100) and `consts` (`refS`) = 0.5."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: ascnormal2a(z,p,refZ)----
  params = c(50,   #--size at sel = refS
             100); #--size at which ascending limb reaches 1
  refS  = 0.5;      #--reference *selectivity*
  #--set `f` to function in global environment to be tested
  compareSelFun(ascnormal2a,z,params,refS,title="ascnormal2a(z,p,refS)");
```

#### Ascending normal (alternative 4)

The `ascnormal2b` function is parameterized by the size at which ascending limb reaches 1 and the delta from the size at 1 to size at which selectivity = `refS` ([@fig-AscNormal4]). `consts[1]` = `refS`, the reference selectivity.

```{r}
#| label: fig-AscNormal4
#| results: hide
#| fig-cap: "Ascending normal function `ascnormal2b` (green dotted line) parameterized by the size at 50% and the difference between the 95% and 50% selected sizes. Here, `params`= (150,75) and `consts` (`refS`) = 0.5."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: ascnormal2b(z,p,refZ)----
params = c(150,  #--size at which ascending limb reaches 1
            75); #--delta from size at 1 to size at which selectivity=refS
refS  = 0.5;     #--reference *selectivity*
#--set `f` to function in global environment to be tested
compareSelFun(ascnormal2b,z,params,refS,title="ascnormal2b(z,p,refS)");
```

### Double logistic functions {#sec-DoubleLogisticFunctions}

Several functions can be used to define a "double logistic" selectivity curve, which consists of 
the ascending part of a logistic function, possibly followed by a sill over intermediate sizes, followed by the descending part of a reversed logistic function. The two normal functions are determined by the location of their modes, as well as their associated widths. These include: `dbllogistic` and `dbllogistic5095`.

### Double logistic function (alternative 1)

The double logistic function `dbllogistic` is parameterized by the ascending limb size at which selectivity = 0.5, the ascending limb slope at 50% selected, the descending limb size at which selectivity = 0, and the descending limb size at 50% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. An example is given in [@fig-DblLogistic1].

```{r}
#| label: fig-DblLogistic1
#| results: hide
#| fig-cap: "The double logistic function `dbllogistic` (green dotted line) is parameterized by the ascending limb size at which selectivity = 0.5, the ascending limb slope at 50% selected, the descending limb size at which selectivity = 0, and the descending limb size at 50% selected. Here, `params`= (50,0.5,125,0.5) and `consts` (`refZ`) = 0."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: dbllogistic(z,p,refZ)----
params = c( 50,  #--ascending limb size at which selectivity = 0.5 (logit-scale mean)
           0.5,  #--ascending limb slope at 50% selected
           125,  #--descending limb size at which selectivity = 0.5 (logit-scale mean)
           0.5); #--descending limb size at 50% selected
refZ  = 0;       #--reference *size*
#--set `f` to function in global environment to be tested
compareSelFun(dbllogistic,z,params,refZ,title="dbllogistic(z,p,refZ)");
```

### Double logistic function (alternative 2)

The double logistic function `dbllogistic5095` is parameterized by the ascending limb size at 50% selected, the ascending limb size at 95% selected, the descending limb size at 95% selected, and the descending limb size at 50% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. An example is given in [@fig-DblLogistic2].

```{r}
#| label: fig-DblLogistic2
#| results: hide
#| fig-cap: "The double logistic function `dbllogistic` (green dotted line) is parameterized by the ascending limb size at 50% selected, the ascending limb size at 95% selected, the descending limb size at 95% selected, and the descending limb size at 50% selected. Here, `params`= (50,100,125,150) and `consts` (`refZ`) = 0."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: dbllogistic5095(z,p,refZ)----
params = c( 50,  #--ascending limb size at 50% selected
           100,  #--ascending limb size at 95% selected
           125,  #--descending limb size at 95% selected
           150); #--descending limb size at 50% selected
refZ  = 0;       #--reference *size*
#--set `f` to function in global environment to be tested
compareSelFun(dbllogistic5095,z,params,refZ,title="dbllogistic5095(z,p,refZ)");
```

### Double normal functions {#sec-DoubleNormalFunctions}

Several functions can be used to define a "double normal" selectivity curve, which consists of 
the left half (i.e., increasing up to the mode) of a normal (gaussian) function, possibly followed by a sill over intermediate sizes, followed by the right half of a normal function. These include: `dblnormal4`, `dblnormal4a`, and `dblnormal6`.

#### 4-parameter double normal (alternative 1) {#sec-DblNrml4}

The 4-parameter double normal function `dblnormal4` is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, the offset to size at which the descending limb departs from 1. The value of `consts` is ignored. An example is given in [@fig-DblNrml6].

```{r}
#| label: fig-DblNrml4
#| results: hide
#| fig-cap: "The 4-parameter double normal function `dblnormal6` (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, the offset to size at which the descending limb departs from 1, and the width of descending limb. Here, `params`= (100,50,40,35) and `consts` (= `refZ`) = 0."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: dblnormal4(z,p,refZ)----
params = c(100,  #--size at which ascending limb reaches 1
            50,  #--width of ascending limb
            40,   #--offset to size at which descending limb departs from 1
            35); #--width of descending limb
refZ  = 0;       #--reference *size*
#--set `f` to function in global environment to be tested
compareSelFun(dblnormal4,z,params,refZ,title="dblnormal4(z,p,refZ)");
```

#### 4-parameter double normal (alternative 2) {#sec-DblNrml4a}

The 4-parameter double normal function `dblnormal4a` is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, a scaled offset at which the descending limb departs from 1, and the width of descending limb. The value of `consts` is ignored. An example is given in [@fig-DblNrml4a].

```{r}
#| label: fig-DblNrml4a
#| results: hide
#| fig-cap: "The 4-parameter double normal function `dblnormal4a`  (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, a scaled offset at which the descending limb departs from 1, and the width of descending limb. The value of `consts` is ignored. Here, `params`= (100,50,0.5,35) and `consts` (= `refZ`) = 0."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: dblnormal4a(z,p,refZ)----
params = c(100,  #--size at which ascending limb reaches 1
            50,  #--width of ascending limb
            0.5, #--scaled increment to params[1] at which descending limb departs from 1
            35); #--width of descending limb
refZ  = 185;       #--reference *size*: max possible size (e.g., max(z))
#--set `f` to function in global environment to be tested
compareSelFun(dblnormal4a,z,params,refZ,title="dblnormal4a(z,p,refZ)");
```

#### 6-parameter double normal {#sec-DblNrml6}

The 6-parameter double normal function `dblnormal6` is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, size at which descending limb departs from 1, the width of descending limb, the floor of ascending limb, and the floor of descending limb. An example is given in [@fig-DblNrml6].

```{r}
#| label: fig-DblNrml6
#| results: hide
#| fig-cap: "The 6-parameter double normal function `dblnormal6` (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, size at which descending limb departs from 1, the width of descending limb, the floor of ascending limb, and the floor of descending limb. Here, `params`= (100,50,125,35,0.1,0.1) and `consts` (= `refZ`) = 0."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: dblnormal6(z,p,refZ)----
params = c(100,  #--size at which ascending limb reaches 1
            50,  #--width of ascending limb
           125,  #--size at which descending limb departs from 1
            35,  #--width of descending limb
           0.1,  #--floor of ascending limb
           0.1); #--floor of descending limb
refZ  = 185;       #--reference *size*: max possible size (e.g., max(z))
#--set `f` to function in global environment to be tested
compareSelFun(dblnormal6,z,params,refZ,title="dblnormal6(z,p,refZ)");
```

### Splines {#sec-Splines}

Two types of spline functions can be used to model selectivity: natural splines and clamped splines. Natural splines are cubic splines whose second derivatives are zero at the boundary knot locations, with the property that extrapolated values have a constant slope. Clamped splines are cubic splines whose first and second derivatives are zero at one or both boundary knot locations, with the property that extrapolated values are "clamped" to (the same as that at) the nearest boundary knot. Functions that represent splines clamped at both ends or at either end are available.

#### Natural splines {#sec-NaturalSplines}

The `selSpline` function, with signature `(z,params,knots,debug=FALSE)`, is used to represent size-specific selectivity using a natural spline. `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSpline].

```{r}
#| label: fig-SelSpline
#| results: hide
#| fig-cap: "The spline function `selSpline` (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: selSpline(z,p,knots)----
#--set up a double normal to be fit with a natural spline
params = c(100,  #--size at which ascending limb reaches 1
            50,  #--width of ascending limb
            0.5, #--scaled increment to params[1] at which descending limb departs from 1
            35); #--width of descending limb
refZ  = 185;       #--reference *size*: max possible size (e.g., max(z))
yz = dblnormal4(z,params,refZ);
yz = ifelse(yz<0.0001,0.0001,ifelse(yz>0.9999,0.999,yz));
nz = length(z);
#--set up spline function knots and params
nk = 6; ik = seq(from=1,to=nz,length.out=nk);
xk = z[ik];
lgtyk = log(yz[ik]/(1-yz[ik]));
params = lgtyk;
knots = xk;
sf = selSpline(z,params,knots);
refZ  = 185;     #--not used
compareSelFun(selSpline,z,params,knots,title="selSpline(z,params,knots)",verbose=FALSE);
```

#### Clamped splines {#sec-ClampedSpline}

The `selSplineClmpd` function, with signature `(z,params,knots,debug=FALSE)`, is used to represent size-specific selectivity with a spline that is clamped (to different values) at both ends.  `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSplineClmpd].

```{r}
#| label: fig-SelSplineClmpd
#| results: hide
#| fig-cap: "The clamped spline function `selSplineClmpd` (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: selSplineClmpd(z,p,knots)----
#--set up a spline curve "clamped" on both ends
params = c(100,  #--size at which ascending limb reaches 1
            50,  #--width of ascending limb
            0.5, #--scaled increment to params[1] at which descending limb departs from 1
            35); #--width of descending limb
refZ  = 185;     #--not used
yz = dblnormal4(z,params,refZ);
yz = ifelse(yz<0.0001,0.0001,ifelse(yz>0.9999,0.999,yz));
nz = length(z);
nk = 6; ik = seq(from=3,to=nz-3,length.out=nk);
xk = z[ik];
lgtyk = log(yz[ik]/(1-yz[ik]));
params = lgtyk;
knots = xk;
sf = selSplineClmpd(z,params,knots);
compareSelFun(selSplineClmpd,z,params,knots,title="selSplineClmpd(z,params,knots)");

```

##### Left-clamped splines

The `selSplineClmpdLeft` function, with signature `(z,params,knots,debug=FALSE)`, is used to represent size-specific selectivity with a spline that is clamped at small sizes (i.e., the left end).  `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSplineClmpdLeft].

```{r}
#| label: fig-SelSplineClmpdLeft
#| results: hide
#| fig-cap: "Left-clamped spline function `selSplineClmpdLeft` (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: selSplineClmpdLeft(z,p,knots)----
#--set up a double normal to be fit with a natural spline
params = c(100,  #--size at which ascending limb reaches 1
            50,  #--width of ascending limb
            0.5, #--scaled increment to params[1] at which descending limb departs from 1
            35); #--width of descending limb
refZ  = 185;       #--reference *size*: max possible size (e.g., max(z))
yz = dblnormal4(z,params,refZ);
yz = ifelse(yz<0.0001,0.0001,ifelse(yz>0.9999,0.999,yz));
nz = length(z);
#--set up spline function knots and params
nk = 6; ik = seq(from=1,to=nz,length.out=nk);
xk = z[ik];
lgtyk = log(yz[ik]/(1-yz[ik]));
params = lgtyk;
knots = xk;
sf = selSplineClmpdLeft(z,params,knots);
compareSelFun(selSplineClmpdLeft,z,params,knots,title="selSplineClmpdLeft(z,params,knots)",verbose=FALSE);
```


##### Right-clamped splines

The `selSplineClmpdRight` function, with signature `(z,params,knots,debug=FALSE)`, is used to represent size-specific selectivity with a spline that is clamped at large sizes (i.e., the right end). `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSplineClmpdRight].

```{r}
#| label: fig-SelSplineClmpdRight
#| results: hide
#| fig-cap: "The right-clamped spline function `selSplineClmpdRight` (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: selSplineClmpdRight(z,p,knots)----
#--set up a double normal to be fit with a natural spline
params = c(100,  #--size at which ascending limb reaches 1
            50,  #--width of ascending limb
            0.5, #--scaled increment to params[1] at which descending limb departs from 1
            35); #--width of descending limb
refZ  = 185;       #--reference *size*: max possible size (e.g., max(z))
yz = dblnormal4(z,params,refZ);
yz = ifelse(yz<0.0001,0.0001,ifelse(yz>0.9999,0.999,yz));
nz = length(z);
#--set up spline function knots and params
nk = 6; ik = seq(from=1,to=nz,length.out=nk);
xk = z[ik];
lgtyk = log(yz[ik]/(1-yz[ik]));
params = lgtyk;
knots = xk;
sf = selSplineClmpdRight(z,params,knots);
refZ  = 185;     #--not used
compareSelFun(selSplineClmpdRight,z,params,knots,title="selSplineClmpdRight(z,params,knots)",verbose=FALSE);
```

### Other selectivity functions {#sec-OtherSelFcns}

Miscellaneous selectivity functions described in this section include: a constant function and a "stacked" logistic function.

#### Constant selectivity {#sec-ConstSel}

The `const_sel` function ([@fig-SelConst]) is used to represent selectivity that is not size-specific (i.e.., the same at all sizes). It has a signature `(z,params,consts)` to match other functions, although `consts` is ignored (if `consts[1]` were used as a reference size, the function would be non-differentiable). 

```{r}
#| label: fig-SelConst
#| results: hide
#| fig-cap: "Constant selectivity function (green dotted line) fit to a constant with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the function fit to the 'true' values. Here, `params` = 1."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: const_sel(z,p,refZ)----
#----function should not really be differentiable(?)
params = c(1); #--constant value
refZ  = 100;     #--reference *size* (not used!)
#--set `f` to function in global environment to be tested
compareSelFun(const_sel,z,params,refZ,title="const_sel(z,p,refZ)");
```

#### Stacked logistic

The `stackedLogistic1` function ([@fig-StackedLogistic]) provides a 5-parameter selectivity function that is formed using two ascending logistic curves, with one stacked atop the other. The function is parameterized by a weighting factor on the first curve (`omega`), the size at the inflection point of the first logistic curve (`mnZ1`), the width of the first logistic curve (`sdZ1`), the size at the inflection point of the second logistic curve (`mnZ2`), and the width of the second logistic curve (`sdZ2`). `params` is the vector (`omega`,`mnZ1`,`sdZ1`,`mnZ2`,`sdZ2`). The value of `consts` is ignored.

```{r}
#| label: fig-StackedLogistic
#| results: hide
#| fig-cap: "The stacked logistic selectivity function (green dotted line) fit to a constant with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the function fit to the 'true' values. Here, `params` = (0.2,75,10,145,10)."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--sel function: stackedLogistic1(z,p,refZ)----
params = c(0.2,  #--omega: -weighting factor on the first curve
            75,  #--mnZ1: size at inflection point for 1st logistic curve
            10,  #--sdZ1: sd for 1st logistic curve
           145,  #--mnZ2: size at inflection point for 2nd logistic curve
            10); #--sdZ2: sd for 2nd logistic curve
refZ  = 185;     #--not used
#--set `f` to function in global environment to be tested
compareSelFun(stackedLogistic1,z,params,refZ,title="stackedLogistic1(z,p,refZ)");
```

## Fishing mortality {#sec-FM}

## Survey catchability {#sec-Srv}

