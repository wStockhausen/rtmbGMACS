---
title: "Model Functions and Parameters"
author: "William Stockhausen"
crossref: 
  fig-title: Figure
  tbl-title: Table
comment: "#>"
collapse: true
toc: true
format: 
  html: 
    html-math-method: mathjax
tbl-cap-location: top
fig-cap-location: bottom
prefer-html: true
keep-md: false
keep-yaml: false
echo: false 
---

<!--NOTE: for scalar variables,    use: *var*   (italics)  
          for vectors/matrices,etc use: ***V*** (bold-italics) 
          for functions            use: **fcn** (bold) 
          for verbatim code        use: `code` 
-->

```{r setup,echo=FALSE}
  suppressPackageStartupMessages(require(RTMB));
  suppressPackageStartupMessages(require(rtmbGMACS));
  suppressPackageStartupMessages(require(ggplot2));
```

## Model processes, functions and parameters

rtmbGMACS can encapsulate the following population- and observation-related processes 
in a model:

  - initial abundance
  - allometry (weight-at-size)
  - recruitment
  - natural mortality
  - growth 
  - maturation 
  - size-specific functions (e.g., selectivity and retention)
  - fishing mortality 
  - survey catchability 
  - movement (TBD?)

Each of these processes can be included in the final model using selections among 
a number of possible functional forms, each with associated parameters defined using 
a hierarchical structure. In this hierarchical structure, "top-level" parameters 
can be fixed or estimated as fixed effects and time-variation 
can be added through annually-varying offsets (as fixed or random effects) which 
can, in turn, be linear functions of environmental covariates.

## CTL file syntax (UNDER DEVELOPMENT)

Both functions and parameters for all processes are defined in the "CTL" file 
(the actual filename of which is arbitrary). The CTL file is a text file: comments 
follow a "#" symbol while function and parameter specifications are made using 
white space-delimited tables with a header line with column names and a 
final line specifying "END TABLE". Sections defining individual processes are 
delimited by a line starting with the name of the process to be defined (e.g. 
"RECRUITMENT") and a line indicating the end of the process definition (e.g., 
"END RECRUITMENT").

### Function and parameter specification 

Functions and parameters within a process definition section are defined using 
table structures that are read in as tibbles. 

#### Functions

Function tables start a header line with a `fcn_id` column 
followed by other column names specific to the process being defined, ending with 
a `label` column. Rows following the header line specify the functions that combine 
to define the process for a specified time block and (possibly) combination of population 
classes. @tbl-Ex1 provides an example table for the recruitment process.

|fcn_id | time_block |sex   |size_fcn  | max size|rec_type |label|
|:---:|:----------:|:----:|:--------:|:-------:|:-------:|:----|
|  1  | 2001:2005  |all   | gamma    |  50     |noSR1    |basic_rec|
|  2  | 2006:2023  |male  | gamma    |  50     |noSR1-RW |male_rec2006+|
|  3  | 2006:2023  |female | gamma   |  45     |noSR1-RW |female_rec2006+|
:Example table of function definitions for the recruitment process. {#tbl-Ex1}

In the table, `fcn_id` provides a unique row reference to refer back to a function 
definition, `time_block` specifies the years to which the definition applies, 
`sex` specifies the sex to which it applies, etc. The columns `fcn_id` and `label` 
must be present in each function definition table, but otherwise the column names 
are specific to the process in question. Additionally, the columns may be in any order.

#### Parameters

The parameters associated with each function defined in the function definitions 
table are defined in a hierarchical set of tables either as 

$$p_{t,c} = p_{t_{ref},c} + \delta p_{t,c} + \left[ \sum_{e} \alpha_{e} \cdot v_{e,t} + \beta_e \right] $$ {#eq-Eq1}

or 

$$p_{t,c} = p_{t_{ref},c} + s \cdot \sum_{t'=t_{ref}+s}^t\delta p_{t',c} + \left[ \sum_{e} \alpha_{e} \cdot v_{e,t} + \beta_e \right] $$ {#eq-Eq2}

In @eq-Eq1, the $\delta p_{t,c}$ are annual offsets to $p_{t_{ref},c}$ with $\delta p_{t_{ref},c}=0$ while $s$ in @eq-Eq2 is $sgn(t-t_{ref})$ and the $\delta p_{t,c}$ are annual random walk innovations. The $\delta p_{t,c}$ can be either fixed or random effects. The effect of 
any environmental covariates is modeled as a sum over individual linear effects, the $\alpha_{e}$ and $\alpha_{e}$ are the (potentially) estimable fixed effects and $v_{e,t}$ represents the value at time $t$ of the *e*-th covariate.

##### Reference-level parameters

The reference-level parameters are defined in tables similar to @tbl-Ex2, which is an example that defines 
the $\alpha$ and $\beta$ parameters for the recruitment-at-size gamma functions from @tbl-Ex1.

|fcn_id|param|par_id|ref_time|scale|units|ival|lb|ub|phz|pr_type|p1|p2|offsets|covars|label|
|:-----:|:------:|:---:|:---------:|:-----:|:------:|:----:|:---:|:----:|:-----:|:----:|:---:|:---:|:--------:|:-------:|:------|
|1|alpha|1|NA|ln|none|9.33|2.7|56|5|none|0|0|no|e1,e2|alpha1|
|1|beta|2|2001|ln|none|3.86|1|3.9|5|none|0|0|yes|NA|beta1|
|2|alpha|3|2006|ln|none|9.33|2.7|56|5|none|0|0|no|e1,e2|alpha2|
|2|alpha|4|2011|ln|none|9.33|2.7|56|5|none|0|0|yes|NA|alpha3|
|2|beta|5|2006|ln|none|3.86|1|3.9|5|none|0|0|no|NA|beta2|
|3|alpha|-3|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|
|3|beta|-2|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|
:Example table of reference-level parameters. {#tbl-Ex2}
  
In @tbl-Ex2: 

  - `fcn_id` identifies a row in the function definition table
  - `param` identifies the name of the relevant parameter being specified
  - `par_id` associates a unique positive integer with the parameter, or a 
  negative value indicating substitution with the parameter associated with the positive value 
  - `ref_time` identifies the reference time for parameters with a hierarchical structure
  - `scale` indicates the scale used to specify the initial value, bounds, and prior 
  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)
  - `units` indicates any units associated with the initial value, bounds, and prior
  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds
  - `phz` identifies the estimation phase in which the parameter should be "turned on" (never estimated if < 0)
  - `pr_type` specifies the prior probability function associated with the estimated parameter
  - `p1`,`p2` specify parameter values for the prior
  - `offsets` indicates whether annually-varying offset parameters (i.e., the $\delta p_{t,c}$) should be associated 
  with the reference parameter
  - `covars` specifies the covariates (if any) text string to associate with the reference parameter as a comma-delimited
  - `label` specifies a specific label to use for the parameter

The columns may be in any order, but (unlike a function definition table) all columns should be present.

##### Parameter offsets

If parameter offsets are defined for any reference parameter, then a table defining these offsets needs to follow the 
table defining the reference parameters. The annually-varying parameter offsets (i.e., the $\delta p_{t,c}$) are defined 
in tables similar to @tbl-Ex3, which follows on from @tbl-Ex2:

|par_id|off_id|time_block|param|scale|units|phz|off_type|RE|ival|pr_type|p1|p2|label|
|:----:|:----:|:--------:|:-----:|:------:|:----:|:---:|:---:|:----:|:-----:|:----:|:---:|:---:|:-------:|
|2|1|2001:2005|beta|ar|none|5|offset|no|0|normal|0|1|dvs_beta|
|4|2|2011:2023|alpha|ar|none|5|RW|no|0|normal|0|1|rw_alpha|
:Example table of offset-level parameters. {#tbl-Ex3}

In @tbl-Ex3:

  - `par_id` identifies a row in the reference parameters definition table
  - `off_id` associates a unique positive integer with the parameter, or a 
  negative value indicating substitution with the parameter associated with the positive value 
  - `time_block` identifies the time block across which the offset parameters are defined
  - `param` indicates the name of the associated reference parameter (provides error checking; it should be redundant with par_id)
  - `scale` indicates the scale used to specify the initial value, bounds, and prior 
  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)
  - `units` indicates any units associated with the initial value, bounds, and prior
  - `phz` identifies the estimation phase in which the parameter should be "turned on" (never estimated if < 0)
  - `off_type` identifies the offset type ("offset" or "RW", implying @eq-Eq1 or @eq-Eq2)
  - `RE` is a flag to regard the offsets as random effects
  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds (the latter two are not included in the example)
  - `pr_type` specifies the prior probability function associated with the estimated offsets
  - `p1`,`p2` specify parameter values for the prior
  - `label` specifies a specific label to use for the parameter
  
The columns may be in any order, but (unlike a function definition table) all columns should be present.

##### Covariates

If covariates are defined for any reference parameter, then a table defining the associated parameters needs to follow the 
table(s) defining the reference parameters and any offset parameters. The annually-varying covariate effects (i.e., the 
$\alpha_e \cdot v_{e,t} + \beta_e$) are defined for the reference parameters in tables similar to @tbl-Ex4, which follows 
on from @tbl-Ex2:

|par_id|cov_id|covar|time_block|param|scale|units|phz|RE|ival|pr_type|p1|p2|label|
|:------:|:---:|:---:|:---------:|:-----:|:------:|:----:|:---:|:---:|:----:|:-----:|:----:|:---:|:--------:|
|1|1|e1|2001:2005|cov_alpha|ar|none|5|no|0|normal|0|1|cov_alpha_e1|
|1|2|e1|2001:2005|cov_beta|ar|none|5|no|0|normal|0|1|cov_beta_e1|
|1|3|e2|2001:2005|cov_alpha|ar|none|5|no|0|normal|0|1|cov_alpha_e2|
|1|4|e2|2001:2005|cov_beta|ar|none|5|no|0|normal|0|1|cov_beta_e2|
:Example table of covariate-level parameters. {#tbl-Ex4}

In @tbl-Ex4:

  - `par_id` identifies a row in the reference parameters definition table
  - `cov_id` associates a unique positive integer with the covariate parameter, or a 
  negative value indicating substitution with the parameter associated with the positive value 
  - `covar` indicates the name of the associated covariate
  - `time_block` identifies the time block across which the covariates are applied
  - `param` indicates the name of the covariate-level parameter
  - `scale` indicates the scale used to specify the initial value, bounds, and prior 
  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)
  - `units` indicates any units associated with the initial value, bounds, and prior
  - `phz` identifies the estimation phase in which the parameter should be "turned on" (never estimated if < 0)
  - `RE` is a flag (yes/no) to regard the offsets as random effects
  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds (the latter two are not included in the example)
  - `pr_type` specifies the prior probability function associated with the estimated offsets
  - `p1`,`p2` specify parameter values for the prior
  - `label` specifies a specific label to use for the parameter

## Initial abundance {#sec-InitAbd}

## Allometry {#sec-Allom}

## Recruitment {#sec-Rec}

## Natural mortality {#sec-NatM}

## Growth {#sec-Grw}

## Maturity {#sec-Mat}

## Selectivity {#sec-Sel}

A number of 1-dimensional functions, listed in the subsections below, can be used to describe size-specific fishery or survey catchability, as well as fishery retention, by fleet and population categories. All have the the signature 

$$ s = fcn(z,params,consts) $$ 

where `s` is an advector with the same number of elements as the vector `z`, representing the selectivity at 
the values of the vector `z`, `fcn` is the function, `params` is an advector representing the function parameters, 
and `consts` is a vector representing any required constants.

```{r defCompareSelFun}
#|results: hide
#'
#' @title Compare a gmacs selectivity function in R and AD contexts
#' @description Function to compare a gmacs selectivity function in R and AD contexts.
#'
#' @param fr - gmacs selectivity function
#' @param z - vector of sizes at which to evaluate selectivity function
#' @param params - vector of "true" parameter values for function
#' @param consts - vector of constants
#' @param title - plot title
#' @param verbose - flag (T/F) to print/plot extra information
#'
#' @return nothing
#'
#' @details This function:
#' \enumerate{
#'   \item calculates `fr` using normal R evaluation
#'   \item creates an RTMB tape of the function and evaluates it in an AD context
#'   \item prints the tape information and jacobian (if verbose=TRUE)
#'   \item adds noise to the "data" created in 1.
#'   \item creates an RTMB objective function to fit the data
#'   \item fits the data using nlminb
#'   \item prints out the estimated parameters (if verbose=TRUE)
#'   \item returns a ggplot2 with a comparison of the R, AD, observed and estimated values
#' }
#'
#' See testing/testSelFunctions.R for example usage.
#'
#' @export
#'
compareSelFun<-function(fr,z,params,consts,title,verbose=TRUE){
  if (verbose) cat("\n#----------------------------------------------------------\n")
  if (verbose) cat("#  testing",title,"\n");
  selr = fr(z,params,consts);#--evaluate using normal R evaluation
  pg = ggplot(tibble::tibble(z=z,s=selr),aes(x=z,y=s)) +
        geom_point() + geom_line() +
        scale_y_continuous(limits=c(min(c(0,selr)),NA)) +
        labs(subtitle="normal R");
  if (verbose) print(pg);

  #--make RTMB tape
  f<-function(p){fr(z,p,consts)};#--"reduce" function to parameters-only for AD taping
  F = MakeTape(f,numeric(length(params)));
  if (verbose) show(F);     #--just FYI
  selad = F(params);        #--evaluate using RTMB AD methods
  if (verbose) print(F$jacobian(params));#--print the jacobian (for fun)

  #--test in simple objective function
  set.seed(111);
  data = list(z=z,obs=selr+rnorm(length(selr),0,0.05));
  objfn<-function(ps){
    getAll(data,ps);
    obs<-OBS(obs);

    prd_sel = fr(z,pars,consts);
    REPORT(prd_sel);

    obs %~% dnorm(prd_sel,1); #--adds -log-likelihood to hidden variable `.nll`
  }
  #--create model----
  mdl = MakeADFun(objfn,parameters=list(pars=params));
  if (verbose) {
    print(mdl$par);
    print(mdl$fn(params));
    print(mdl$gr(params));
  }
  #--optimize the model----
  #----(won't exactly reproduce `params`, but should be close)
  opt = nlminb(mdl$par,mdl$fn,mdl$gr,hessian=mdl$he);
  if (verbose) {
    print(opt$par);
    print(RTMB::sdreport(mdl));
  }
  dfr = dplyr::bind_cols(tibble::as_tibble(data),
                         `true R`  = selr,
                         `true AD` = selad,
                         est = mdl$report()$prd_sel) |>
        tidyr::pivot_longer(c("true R","true AD","est","obs"),
                            names_to="type",values_to="value") |>
        dplyr::mutate(type=factor(type));
  p = ggplot(dfr |> dplyr::filter(type=="true AD"),aes(x=z,y=value)) +
        geom_point(data=dfr |> dplyr::filter(type=="obs"),colour="red") +
        geom_point(data=dfr |> dplyr::filter(type=="true R"),colour="blue") +
        geom_line(colour="green") +
        geom_line(data=dfr |> dplyr::filter(type=="est"),colour="green",linetype=3) +
        scale_y_continuous(limits=c(min(c(0,dfr$value)),NA)) +
        labs(subtitle=title) +
        wtsPlots::getStdTheme();
  #print(p);
  if (verbose) cat("#----------------------------------------------------------\n")
  return(p);
}
#--define size bins
z = seq(25,180,by=5);
```

### Logistic functions {#sec-LogisticFunctions}


### Splines {#sec-Splines}

Two types of spline functions can be used to model selectivity: natural splines and clamped splines. Natural splines are cubic splines whose second derivatives are zero at the boundary knot locations, with the property that extrapolated values have a constant slope. Clamped splines are cubic splines whose first and second derivatives are zero at one or both boundary knot locations, with the property that extrapolated values are "clamped" to (the same as that at) the nearest boundary knot. Functions that represent splines clamped at both ends or at either end are available.

#### Natural splines {#sec-NaturalSplines}

The `selSpline` function is used to represent size-specific selectivity using a natural spline. `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSpline].

```{r}
#| label: fig-SelSpline
#| results: hide
#| fig-cap: "Spline function (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values."
#| fig-asp: 0.6 
#| fig-width: 6.0
#--set up a double normal to be fit with a natural spline
params = c(100,  #--size at which ascending limb reaches 1
            50,  #--width of ascending limb
            0.5, #--scaled increment to params[1] at which descending limb departs from 1
            35); #--width of descending limb
refZ  = 185;       #--reference *size*: max possible size (e.g., max(z))
yz = dblnormal4(z,params,refZ);
yz = ifelse(yz<0.0001,0.0001,ifelse(yz>0.9999,0.999,yz));
nz = length(z);
#--set up spline function knots and params
nk = 6; ik = seq(from=1,to=nz,length.out=nk);
xk = z[ik];
lgtyk = log(yz[ik]/(1-yz[ik]));
params = lgtyk;
knots = xk;
sf = selSpline(z,params,knots);
refZ  = 185;     #--not used
compareSelFun(selSpline,z,params,knots,title="selSpline(z,params,knots)",verbose=FALSE);
```

#### Clamped splines {#sec-ClampedSpline}

The `selSplineClmpd` function is used to represent size-specific selectivity with a spline that is clamped (to different values) at both ends. 

##### Left-clamped splines

The `selSplineClmpdLeft` function is used to represent size-specific selectivity with a spline that is clamped at small sizes (i.e., the left end). 

##### Right-clamped splines

The `selSplineClmpdRight` function is used to represent size-specific selectivity with a spline that is clamped at large sizes (i.e., the right end). 

## Fishing mortality {#sec-FM}

## Survey catchability {#sec-Srv}

