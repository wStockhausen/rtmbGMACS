---
title: "Model Dimensions"
author: "William Stockhausen"
crossref: 
  fig-title: Figure
  tbl-title: Table
comment: "#>"
collapse: true
toc: true
format: 
  html: 
    html-math-method: mathjax
tbl-cap-location: top
fig-cap-location: bottom
#prefer-html: true
keep-md: false
keep-yaml: false
---

<!--NOTE: for scalar variables,    use: *var*   (italics)  
          for vectors/matrices,etc use: ***V*** (bold-italics) 
          for functions            use: **fcn** (bold) 
          for verbatim code        use: `code` 
-->

```{r setup,echo=FALSE}
  suppressPackageStartupMessages(require(rtmbGMACS));
```

# Model dimensions

## Intrinsic model dimensions

The RTMB version of the GMACS framework makes a distinction between *intrinsic* model dimensions and *user* dimensions. Intrinsic model dimensions constitute the set of dimensions with which every GMACS model is defined internally. The following table lists the *intrinsic* dimensions in the GMACS framework: 

```{r}
#| label: tbl-MD-IntrinsicDims
#| tbl-cap: Intrinsic dimensions defined in the GMACS framework.
  tbl = tibble::tribble(~id,~description,
                          "y","year",
                          "s","season",
                          "r","region (spatial area)",
                          "x","sex",
                          "m","maturity state",
                          "a","age (post-recruitment)",
                          "p","post-molt age",
                          "z","size");
  tbl |> kableExtra::kbl() |> 
        kableExtra::kable_styling(bootstrap_options="striped",
                                  latex_options = c("striped","scaled down"))
```

Users of the original (i.e., ADMB) version of GMACS will note that "shell condition" is absent as a dimension: post-molt age can provide a somewhat more finely-grained characterization of shell age than simply "new shell"/"old shell". Including age and post-molt age as dimensions also allows an explicit characterization of age-based processes (e.g., maximum age limits). Maximum age or post-molt age bins can be defined as terminal or accumulator bins. 

## User dimensions 

User dimensions consist of subsets of the intrinsic dimensions and are used as a shorthand to define dimensions for a particular model, 
parameter set, or dataset. Within the GMACS code, user dimensions $\mathbb{U}$ are expanded to the intrinsic dimensions $\mathbb{I}$ in a fashion similar to a right join $\mathbb{U} \ltimes \mathbb{I}$. When defining a model's dimensions, the user's given dimensions are expanded to the set of intrinsic dimensions, with non-specified dimensions having a size of 1 and a default value or label.

For a given year, population abundance is integrated across seasons within the year and different processes (e.g., natural mortality, growth, fishing, surveys) can occur in different seasons. Model dimensions setup consists of specifying the years of interest ($y$), the within-years seasons ($s$) over which the model will be integrated, and a set of categories ($\{c\}$) into which the population is divided (e.g., region, sex, and size). When specifying model dimensions, levels within a given population category can be nested within another category (e.g., different size classes might be defined for males and females if, for example, they exhibited substantially different growth patterns). In addition to intrinsic and user model dimensions, two other types of model dimensions are distinguished: *sparse* and *dense*. A set of dimensions is characterized as *sparse* when different levels of one dimension are nested within the levels of another dimension such that the resulting set of levels has fewer members in it than the set of dimensions resulting from a complete crossing of all unique dimension levels. The latter set of (fully-crossed) dimensions is characterized as *dense*. 

On the R side of things, a special dataframe (actually, a tibble) referred to as a "dimension map" is used to characterize any set of dimensions, either intrinsic or user, sparse or dense.The first column in the model dimensions map is simply the row number associated with the unique combination of dimension levels the row reflects. It also provides the index into the population abundance 
vector for that combination of dimensions (and thus allows the extraction of the associated dimension levels given 
the index value). The remaining columns correspond to individual dimensions; for each column, the value for each row is the level (as a factor) of the associated dimension. Rows are ordered by the combination of factor levels across the dimensions, with 
levels changing the fastest in the right-most column.

A dimensions map also has four non-standard attributes: `dmtyp`, `dmnms`, `dmlvs`, and `dmlns`: 

  - `dmtyp` identifies the type of dimensions (intrinsic or user, sparse or dense)
  - `dmnms` is a character vector with the dimension names.
  - `dmlvs` is a named list of character vectors comprising the unique levels for each dimension.
  - `dmlns` is a named integer vector with the length (number of unique levels) of each dimension.

Given a sparse dimensions map, the corresponding dense map can be obtained by a full crossing of the levels in the sparse map's `dmlvs` attribute.

Most model quantities are represented as vectors, and thus have associated dimensions maps in order to be able to identify the dimension levels associated with each index value.

### Sparse dimension maps

Sparse dimensions are defined using the R function **createSparseDimsMap**. As an example (@tbl-ExSparseDimsMap), the following creates a set of dimensions encompassing year (*y*), season(*s*), sex (*x*), and size (*z*), with different size classes for males and females. Note that the "dimension name(s)" must be added as an attribute `dmnms` to the vector or list defining the levels.

```{r}
#| label: tbl-ExSparseDimsMap
#| tbl-cap: "Example sparse dimensions map."
#| eval: !expr '(require(kableExtra))'
#> Create the individual dimensions as vectors or lists (for nested dimensions)
#> --assign the attribute "dmnms", the dimension name(s) (plural if nested)
#> ----model years
vYs = 2001:2005;                  attr(vYs,"dmnms")<-"y";
#> ----model seasons
vSs = c("fall","spring");         attr(vSs,"dmnms")<-"s";
#> ----model sexes
vXs = c("MALE","FEMALE");         attr(vXs,"dmnms")<-"x";
#> ----model sizes, nested with sexes
vZs = list(  MALE=seq(40,60,5),
           FEMALE=seq(25,50,5));  attr(vZs,"dmnms")<-c("x","z");
#>--create the dimensions "map"
dmsSparse = createSparseDimsMap(y=vYs,s=vSs,x=vXs,z=vZs);
dmsSparse |> kableExtra::kbl(booktabs=TRUE,longtable=TRUE);
```

### Dense dimension maps

Given a sparse dimensions map `dmsSparse`, the associated dense map can be created using the R function **createDenseDimsMap**: 

```{r}
#| label: tbl-ExDenseDimsMap
#| tbl-cap: "Example dense dimensions map (first 20 rows) corrseponding to the previous sparse dimensions map."
#| eval: !expr '(require(kableExtra))'
#| echo: false
dmsDense = createDenseDimsMap(dmsSparse);
dmsDense[1:20,] |> kableExtra::kbl(booktabs=TRUE,longtable=TRUE);
```

In the above example, the size (number of rows) of the resulting dense dimensions map (`r nrow(dmsDense)`) is larger than that of the nested dimensions map (`r nrow(dmsSparse)`) because of the different size bins defined for males and females.

### Aggregating over model dimensions

Data fit in GMACS typically represent quantities aggregated over some combination of population categories, so it is necessary to determine the mapping from model indices to data indices. The function **createAggregatorMap** provides the required mapping of 1-d indices from one dimensions map to another, as illustrated in the following example (@tbl-Ex2) using the dimensions map `dmsDense` from the previous example:

```{r ex2}
#> Example of how to create an aggregator map using "dmsDense" from above
#> to aggregate by year (y) and sex (x) over season (s) and size (z). 
#>    Create dimensions map with only y and x
  aggDims = keepDims(dmsDense,keep=c("y","x"));#--keeps only y and x dimensions, recreates 1-d vector index
#>    Create aggregator map from y,x,s,z to y,x
  aggMap  = createAggregatorMap(dmsDense,aggDims,keepOrigDims=TRUE);
```

`idx_to` is the vector index for `aggMap`, `idx_from` is the vector index for `dmsDense`.

```{r, eval=FALSE}
#| label: tbl-Ex2
#| tbl-cap: Example aggregator map (from indices `idx_frm` to indices `idx_to`).
#| eval: !expr 'require(kableExtra)'
#| echo: false
aggMap |> kableExtra::kbl(booktabs=TRUE,longtable=TRUE);
```

## Canonical dimensions format
