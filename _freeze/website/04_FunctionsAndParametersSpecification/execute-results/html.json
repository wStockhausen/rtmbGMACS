{
  "hash": "72eac608a40f53768ed76b1d769d1dd3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Model Functions and Parameters\"\nauthor: \"William Stockhausen\"\ncrossref: \n  fig-title: Figure\n  tbl-title: Table\ncomment: \"#>\"\ncollapse: true\ntoc: true\nformat: \n  html: \n    html-math-method: mathjax\ntbl-cap-location: top\nfig-cap-location: bottom\nprefer-html: true\nkeep-md: false\nkeep-yaml: false\necho: false \n---\n\n\n<!--NOTE: for scalar variables,    use: *var*   (italics)  \n          for vectors/matrices,etc use: ***V*** (bold-italics) \n          for functions            use: **fcn** (bold) \n          for verbatim code        use: `code` \n-->\n\n\n::: {.cell}\n\n:::\n\n\n## Model processes, functions and parameters\n\nrtmbGMACS can encapsulate the following population- and observation-related processes \nin a model:\n\n  - initial abundance\n  - allometry (weight-at-size)\n  - recruitment\n  - natural mortality\n  - growth \n  - maturation \n  - size-specific functions (e.g., selectivity and retention)\n  - fishing mortality \n  - survey catchability \n  - movement (TBD?)\n\nEach of these processes can be included in the final model using selections among \na number of possible functional forms, each with associated parameters defined using \na hierarchical structure. In this hierarchical structure, \"top-level\" parameters \ncan be fixed or estimated as fixed effects and time-variation \ncan be added through annually-varying offsets (as fixed or random effects) which \ncan, in turn, be linear functions of environmental covariates.\n\n## CTL file syntax (UNDER DEVELOPMENT)\n\nBoth functions and parameters for all processes are defined in the \"CTL\" file \n(the actual filename of which is arbitrary). The CTL file is a text file: comments \nfollow a \"#\" symbol while function and parameter specifications are made using \nwhite space-delimited tables with a header line with column names and a \nfinal line specifying \"END TABLE\". Sections defining individual processes are \ndelimited by a line starting with the name of the process to be defined (e.g. \n\"RECRUITMENT\") and a line indicating the end of the process definition (e.g., \n\"END RECRUITMENT\").\n\n### Function and parameter specification \n\nFunctions and parameters within a process definition section are defined using \ntable structures that are read in as tibbles. \n\n#### Functions\n\nFunction tables start a header line with a `fcn_id` column \nfollowed by other column names specific to the process being defined, ending with \na `label` column. Rows following the header line specify the functions that combine \nto define the process for a specified time block and (possibly) combination of population \nclasses. @tbl-Ex1 provides an example table for the recruitment process.\n\n|fcn_id | time_block |sex   |size_fcn  | max size|rec_type |label|\n|:---:|:----------:|:----:|:--------:|:-------:|:-------:|:----|\n|  1  | 2001:2005  |all   | gamma    |  50     |noSR1    |basic_rec|\n|  2  | 2006:2023  |male  | gamma    |  50     |noSR1-RW |male_rec2006+|\n|  3  | 2006:2023  |female | gamma   |  45     |noSR1-RW |female_rec2006+|\n:Example table of function definitions for the recruitment process. {#tbl-Ex1}\n\nIn the table, `fcn_id` provides a unique row reference to refer back to a function \ndefinition, `time_block` specifies the years to which the definition applies, \n`sex` specifies the sex to which it applies, etc. The columns `fcn_id` and `label` \nmust be present in each function definition table, but otherwise the column names \nare specific to the process in question. Additionally, the columns may be in any order.\n\n#### Parameters\n\nThe parameters associated with each function defined in the function definitions \ntable are defined in a hierarchical set of tables either as \n\n$$p_{t,c} = p_{t_{ref},c} + \\delta p_{t,c} + \\left[ \\sum_{e} \\alpha_{e} \\cdot v_{e,t} + \\beta_e \\right] $$ {#eq-Eq1}\n\nor \n\n$$p_{t,c} = p_{t_{ref},c} + s \\cdot \\sum_{t'=t_{ref}+s}^t\\delta p_{t',c} + \\left[ \\sum_{e} \\alpha_{e} \\cdot v_{e,t} + \\beta_e \\right] $$ {#eq-Eq2}\n\nIn @eq-Eq1, the $\\delta p_{t,c}$ are annual offsets to $p_{t_{ref},c}$ with $\\delta p_{t_{ref},c}=0$ while $s$ in @eq-Eq2 is $sgn(t-t_{ref})$ and the $\\delta p_{t,c}$ are annual random walk innovations. The $\\delta p_{t,c}$ can be either fixed or random effects. The effect of \nany environmental covariates is modeled as a sum over individual linear effects, the $\\alpha_{e}$ and $\\alpha_{e}$ are the (potentially) estimable fixed effects and $v_{e,t}$ represents the value at time $t$ of the *e*-th covariate.\n\n##### Reference-level parameters\n\nThe reference-level parameters are defined in tables similar to @tbl-Ex2, which is an example that defines \nthe $\\alpha$ and $\\beta$ parameters for the recruitment-at-size gamma functions from @tbl-Ex1.\n\n|fcn_id|param|par_id|ref_time|scale|units|ival|lb|ub|phz|pr_type|p1|p2|offsets|covars|label|\n|:-----:|:------:|:---:|:---------:|:-----:|:------:|:----:|:---:|:----:|:-----:|:----:|:---:|:---:|:--------:|:-------:|:------|\n|1|alpha|1|NA|ln|none|9.33|2.7|56|5|none|0|0|no|e1,e2|alpha1|\n|1|beta|2|2001|ln|none|3.86|1|3.9|5|none|0|0|yes|NA|beta1|\n|2|alpha|3|2006|ln|none|9.33|2.7|56|5|none|0|0|no|e1,e2|alpha2|\n|2|alpha|4|2011|ln|none|9.33|2.7|56|5|none|0|0|yes|NA|alpha3|\n|2|beta|5|2006|ln|none|3.86|1|3.9|5|none|0|0|no|NA|beta2|\n|3|alpha|-3|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|\n|3|beta|-2|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|NA|\n:Example table of reference-level parameters. {#tbl-Ex2}\n  \nIn @tbl-Ex2: \n\n  - `fcn_id` identifies a row in the function definition table\n  - `param` identifies the name of the relevant parameter being specified\n  - `par_id` associates a unique positive integer with the parameter, or a \n  negative value indicating substitution with the parameter associated with the positive value \n  - `ref_time` identifies the reference time for parameters with a hierarchical structure\n  - `scale` indicates the scale used to specify the initial value, bounds, and prior \n  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)\n  - `units` indicates any units associated with the initial value, bounds, and prior\n  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds\n  - `phz` identifies the estimation phase in which the parameter should be \"turned on\" (never estimated if < 0)\n  - `pr_type` specifies the prior probability function associated with the estimated parameter\n  - `p1`,`p2` specify parameter values for the prior\n  - `offsets` indicates whether annually-varying offset parameters (i.e., the $\\delta p_{t,c}$) should be associated \n  with the reference parameter\n  - `covars` specifies the covariates (if any) text string to associate with the reference parameter as a comma-delimited\n  - `label` specifies a specific label to use for the parameter\n\nThe columns may be in any order, but (unlike a function definition table) all columns should be present.\n\n##### Parameter offsets\n\nIf parameter offsets are defined for any reference parameter, then a table defining these offsets needs to follow the \ntable defining the reference parameters. The annually-varying parameter offsets (i.e., the $\\delta p_{t,c}$) are defined \nin tables similar to @tbl-Ex3, which follows on from @tbl-Ex2:\n\n|par_id|off_id|time_block|param|scale|units|phz|off_type|RE|ival|pr_type|p1|p2|label|\n|:----:|:----:|:--------:|:-----:|:------:|:----:|:---:|:---:|:----:|:-----:|:----:|:---:|:---:|:-------:|\n|2|1|2001:2005|beta|ar|none|5|offset|no|0|normal|0|1|dvs_beta|\n|4|2|2011:2023|alpha|ar|none|5|RW|no|0|normal|0|1|rw_alpha|\n:Example table of offset-level parameters. {#tbl-Ex3}\n\nIn @tbl-Ex3:\n\n  - `par_id` identifies a row in the reference parameters definition table\n  - `off_id` associates a unique positive integer with the parameter, or a \n  negative value indicating substitution with the parameter associated with the positive value \n  - `time_block` identifies the time block across which the offset parameters are defined\n  - `param` indicates the name of the associated reference parameter (provides error checking; it should be redundant with par_id)\n  - `scale` indicates the scale used to specify the initial value, bounds, and prior \n  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)\n  - `units` indicates any units associated with the initial value, bounds, and prior\n  - `phz` identifies the estimation phase in which the parameter should be \"turned on\" (never estimated if < 0)\n  - `off_type` identifies the offset type (\"offset\" or \"RW\", implying @eq-Eq1 or @eq-Eq2)\n  - `RE` is a flag to regard the offsets as random effects\n  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds (the latter two are not included in the example)\n  - `pr_type` specifies the prior probability function associated with the estimated offsets\n  - `p1`,`p2` specify parameter values for the prior\n  - `label` specifies a specific label to use for the parameter\n  \nThe columns may be in any order, but (unlike a function definition table) all columns should be present.\n\n##### Covariates\n\nIf covariates are defined for any reference parameter, then a table defining the associated parameters needs to follow the \ntable(s) defining the reference parameters and any offset parameters. The annually-varying covariate effects (i.e., the \n$\\alpha_e \\cdot v_{e,t} + \\beta_e$) are defined for the reference parameters in tables similar to @tbl-Ex4, which follows \non from @tbl-Ex2:\n\n|par_id|cov_id|covar|time_block|param|scale|units|phz|RE|ival|pr_type|p1|p2|label|\n|:------:|:---:|:---:|:---------:|:-----:|:------:|:----:|:---:|:---:|:----:|:-----:|:----:|:---:|:--------:|\n|1|1|e1|2001:2005|cov_alpha|ar|none|5|no|0|normal|0|1|cov_alpha_e1|\n|1|2|e1|2001:2005|cov_beta|ar|none|5|no|0|normal|0|1|cov_beta_e1|\n|1|3|e2|2001:2005|cov_alpha|ar|none|5|no|0|normal|0|1|cov_alpha_e2|\n|1|4|e2|2001:2005|cov_beta|ar|none|5|no|0|normal|0|1|cov_beta_e2|\n:Example table of covariate-level parameters. {#tbl-Ex4}\n\nIn @tbl-Ex4:\n\n  - `par_id` identifies a row in the reference parameters definition table\n  - `cov_id` associates a unique positive integer with the covariate parameter, or a \n  negative value indicating substitution with the parameter associated with the positive value \n  - `covar` indicates the name of the associated covariate\n  - `time_block` identifies the time block across which the covariates are applied\n  - `param` indicates the name of the covariate-level parameter\n  - `scale` indicates the scale used to specify the initial value, bounds, and prior \n  (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)\n  - `units` indicates any units associated with the initial value, bounds, and prior\n  - `phz` identifies the estimation phase in which the parameter should be \"turned on\" (never estimated if < 0)\n  - `RE` is a flag (yes/no) to regard the offsets as random effects\n  - `ival`, `lb`, `ub` specify the initial value and lower and upper bounds (the latter two are not included in the example)\n  - `pr_type` specifies the prior probability function associated with the estimated offsets\n  - `p1`,`p2` specify parameter values for the prior\n  - `label` specifies a specific label to use for the parameter\n\n## Initial abundance {#sec-InitAbd}\n\n## Allometry {#sec-Allom}\n\n## Recruitment {#sec-Rec}\n\n## Natural mortality {#sec-NatM}\n\n## Growth {#sec-Grw}\n\n## Maturity {#sec-Mat}\n\n## Selectivity {#sec-Sel}\n\nA number of 1-dimensional functions, listed in the subsections below, can be used to describe size-specific fishery or survey catchability, as well as fishery retention, by fleet and population categories. All have the the signature \n\n$$ s = fcn(z,params,consts,debug=FALSE) $$ \n\nwhere `s` is an advector with the same number of elements as the vector `z`, representing the selectivity at \nthe values of the vector `z`, `fcn` is the function, `params` is an advector representing the function parameters, \nand `consts` is a vector representing any required constants.\n\n\n::: {.cell}\n\n:::\n\n\n### Logistic functions {#sec-LogisticFunctions}\n\nSeveral logistic selectivity functions reflecting different parameterizations are available, including the `asclogistic`, `asclogistic1`, `asclogistic5095`, and `asclogistic50D95` functions. For each, `consts[1]` indicates the size at full selection if > 0, that no rescaling will be done if = 0, or that the values should be normalized by the maximum if < 0. Other elements of `consts` are ignored.\n\n#### Ascending logistic (alternative 1)\n\nThe `asclogistic` function is parameterized by the size and width (1/slope) at 50% selected ([@fig-AscLogistic1]). \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in fun(libname, pkgname): couldn't connect to display\n\"/private/tmp/com.apple.launchd.DRbboYkDtw/org.xquartz:0\"\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Ascending logistic function `asclogistic` (green dotted line) selectivity function parameterized by the size and slope at 50% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. Here, `params`= (100,0.05) and consts = 125.](04_FunctionsAndParametersSpecification_files/figure-html/fig-AscLogistic1-1.png){#fig-AscLogistic1 width=576}\n:::\n:::\n\n\n#### Ascending logistic (alternative 2)\n\nThe `asclogistic1` function is parameterized by the size and width (1/slope) at 50% selected ([@fig-AscLogistic2]). \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ascending logistic function `asclogistic1` (green dotted line) selectivity function parameterized by the size and width (1/slope) at 50% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. Here, `params`= (100,50) and consts = 125.](04_FunctionsAndParametersSpecification_files/figure-html/fig-AscLogistic2-1.png){#fig-AscLogistic2 width=576}\n:::\n:::\n\n\n#### Ascending logistic (alternative 3)\n\nThe `asclogistic5095` function is parameterized by the sizes at 50% and 95% selected ([@fig-AscLogistic3]). \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ascending logistic function `asclogistic5095` (green dotted line) parameterized by sizes at 50% and 95% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. Here, `params`= (50,125) and consts = 0.](04_FunctionsAndParametersSpecification_files/figure-html/fig-AscLogistic3-1.png){#fig-AscLogistic3 width=576}\n:::\n:::\n\n\n#### Ascending logistic (alternative 4)\n\nThe `asclogistic50D95` function is parameterized by the size at 50% and the difference between the 95% and 50% selected sizes ([@fig-AscLogistic4]). \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ascending logistic function `asclogistic50D95` (green dotted line) parameterized by the size at 50% and the difference between the 95% and 50% selected sizes. Here, `params`= (50,75) and consts = 0.](04_FunctionsAndParametersSpecification_files/figure-html/fig-AscLogistic4-1.png){#fig-AscLogistic4 width=576}\n:::\n:::\n\n\n### Ascending normal functions {#sec-AscNormalFunctions}\n\nSeveral functions can be used to define a selectivity curve using the ascending portion of a normal (gaussian) curve and a sill. An ascending normal selectivity curve has an advantage over a logistic curve in an AD setting because it achieves its maximum (1) at a finite size, whereas logistic functions only approach their maximum values asymptotically. Functions defined include: `ascnormal1`, `ascnormal2`, `ascnormal2a`, `ascnormal2b`, `ascnormal3`.\n\n#### Ascending normal (alternative 1)\n\nThe `ascnormal1` function is parameterized by the width of the ascending limb and the size at which it reaches 1 ([@fig-AscNormal1]). \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ascending normal function `ascnormal1` (green dotted line) selectivity function parameterized by the width of the ascending limb and the size at which it reaches 1. `consts` is ignored, but must a dummy value must be given. Here, `params`= (25,100) and consts = 50.](04_FunctionsAndParametersSpecification_files/figure-html/fig-AscNormal1-1.png){#fig-AscNormal1 width=576}\n:::\n:::\n\n\n#### Ascending normal (alternative 2)\n\nThe `ascnormal2` function is parameterized by the value of selectivity at the reference size (`refZ`) and size at which ascending limb reaches 1 ([@fig-AscNormal2]). `refZ` is specified by `consts[1]`.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ascending normal function `ascnormal2` (green dotted line) selectivity function parameterized by the value of selectivity at the reference size (`refZ`) and size at which ascending limb reaches 1. `consts[1]` = `refZ`. Here, `params`= (0.5,100) and consts (`refZ`) = 50.](04_FunctionsAndParametersSpecification_files/figure-html/fig-AscNormal2-1.png){#fig-AscNormal2 width=576}\n:::\n:::\n\n\n#### Ascending normal (alternative 3)\n\nThe `ascnormal2a` function is parameterized by the size at which selectivity reaches `refS` and the size at which the ascending limb reaches 1 ([@fig-AscNormal3]). `consts[1]` = `refS`, the reference selectivity.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ascending normal function `ascnormal2a` (green dotted line) parameterized by the size at which selectivity reaches `refS` and the size at which the ascending limb reaches 1. `consts[1]` = `refS`, the reference selectivity. Here, `params`= (50,100) and `consts` (`refS`) = 0.5.](04_FunctionsAndParametersSpecification_files/figure-html/fig-AscNormal3-1.png){#fig-AscNormal3 width=576}\n:::\n:::\n\n\n#### Ascending normal (alternative 4)\n\nThe `ascnormal2b` function is parameterized by the size at which ascending limb reaches 1 and the delta from the size at 1 to size at which selectivity = `refS` ([@fig-AscNormal4]). `consts[1]` = `refS`, the reference selectivity.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ascending normal function `ascnormal2b` (green dotted line) parameterized by the size at 50% and the difference between the 95% and 50% selected sizes. Here, `params`= (150,75) and `consts` (`refS`) = 0.5.](04_FunctionsAndParametersSpecification_files/figure-html/fig-AscNormal4-1.png){#fig-AscNormal4 width=576}\n:::\n:::\n\n\n### Double logistic functions {#sec-DoubleLogisticFunctions}\n\nSeveral functions can be used to define a \"double logistic\" selectivity curve, which consists of \nthe ascending part of a logistic function, possibly followed by a sill over intermediate sizes, followed by the descending part of a reversed logistic function. The two normal functions are determined by the location of their modes, as well as their associated widths. These include: `dbllogistic` and `dbllogistic5095`.\n\n### Double logistic function (alternative 1)\n\nThe double logistic function `dbllogistic` is parameterized by the ascending limb size at which selectivity = 0.5, the ascending limb slope at 50% selected, the descending limb size at which selectivity = 0, and the descending limb size at 50% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. An example is given in [@fig-DblLogistic1].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The double logistic function `dbllogistic` (green dotted line) is parameterized by the ascending limb size at which selectivity = 0.5, the ascending limb slope at 50% selected, the descending limb size at which selectivity = 0, and the descending limb size at 50% selected. Here, `params`= (50,0.5,125,0.5) and `consts` (`refZ`) = 0.](04_FunctionsAndParametersSpecification_files/figure-html/fig-DblLogistic1-1.png){#fig-DblLogistic1 width=576}\n:::\n:::\n\n\n### Double logistic function (alternative 2)\n\nThe double logistic function `dbllogistic5095` is parameterized by the ascending limb size at 50% selected, the ascending limb size at 95% selected, the descending limb size at 95% selected, and the descending limb size at 50% selected. `consts[1]` represents the size at full selection if > 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if < 0. An example is given in [@fig-DblLogistic2].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The double logistic function `dbllogistic` (green dotted line) is parameterized by the ascending limb size at 50% selected, the ascending limb size at 95% selected, the descending limb size at 95% selected, and the descending limb size at 50% selected. Here, `params`= (50,100,125,150) and `consts` (`refZ`) = 0.](04_FunctionsAndParametersSpecification_files/figure-html/fig-DblLogistic2-1.png){#fig-DblLogistic2 width=576}\n:::\n:::\n\n\n### Double normal functions {#sec-DoubleNormalFunctions}\n\nSeveral functions can be used to define a \"double normal\" selectivity curve, which consists of \nthe left half (i.e., increasing up to the mode) of a normal (gaussian) function, possibly followed by a sill over intermediate sizes, followed by the right half of a normal function. These include: `dblnormal4`, `dblnormal4a`, and `dblnormal6`.\n\n#### 4-parameter double normal (alternative 1) {#sec-DblNrml4}\n\nThe 4-parameter double normal function `dblnormal4` is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, the offset to size at which the descending limb departs from 1. The value of `consts` is ignored. An example is given in [@fig-DblNrml6].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The 4-parameter double normal function `dblnormal6` (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, the offset to size at which the descending limb departs from 1, and the width of descending limb. Here, `params`= (100,50,40,35) and `consts` (= `refZ`) = 0.](04_FunctionsAndParametersSpecification_files/figure-html/fig-DblNrml4-1.png){#fig-DblNrml4 width=576}\n:::\n:::\n\n\n#### 4-parameter double normal (alternative 2) {#sec-DblNrml4a}\n\nThe 4-parameter double normal function `dblnormal4a` is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, a scaled offset at which the descending limb departs from 1, and the width of descending limb. The value of `consts` is ignored. An example is given in [@fig-DblNrml4a].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The 4-parameter double normal function `dblnormal4a`  (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, a scaled offset at which the descending limb departs from 1, and the width of descending limb. The value of `consts` is ignored. Here, `params`= (100,50,0.5,35) and `consts` (= `refZ`) = 0.](04_FunctionsAndParametersSpecification_files/figure-html/fig-DblNrml4a-1.png){#fig-DblNrml4a width=576}\n:::\n:::\n\n\n#### 6-parameter double normal {#sec-DblNrml6}\n\nThe 6-parameter double normal function `dblnormal6` is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, size at which descending limb departs from 1, the width of descending limb, the floor of ascending limb, and the floor of descending limb. An example is given in [@fig-DblNrml6].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The 6-parameter double normal function `dblnormal6` (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, size at which descending limb departs from 1, the width of descending limb, the floor of ascending limb, and the floor of descending limb. Here, `params`= (100,50,125,35,0.1,0.1) and `consts` (= `refZ`) = 0.](04_FunctionsAndParametersSpecification_files/figure-html/fig-DblNrml6-1.png){#fig-DblNrml6 width=576}\n:::\n:::\n\n\n### Splines {#sec-Splines}\n\nTwo types of spline functions can be used to model selectivity: natural splines and clamped splines. Natural splines are cubic splines whose second derivatives are zero at the boundary knot locations, with the property that extrapolated values have a constant slope. Clamped splines are cubic splines whose first and second derivatives are zero at one or both boundary knot locations, with the property that extrapolated values are \"clamped\" to (the same as that at) the nearest boundary knot. Functions that represent splines clamped at both ends or at either end are available.\n\n#### Natural splines {#sec-NaturalSplines}\n\nThe `selSpline` function, with signature `(z,params,knots,debug=FALSE)`, is used to represent size-specific selectivity using a natural spline. `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSpline].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The spline function `selSpline` (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values.](04_FunctionsAndParametersSpecification_files/figure-html/fig-SelSpline-1.png){#fig-SelSpline width=576}\n:::\n:::\n\n\n#### Clamped splines {#sec-ClampedSpline}\n\nThe `selSplineClmpd` function, with signature `(z,params,knots,debug=FALSE)`, is used to represent size-specific selectivity with a spline that is clamped (to different values) at both ends.  `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSplineClmpd].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The clamped spline function `selSplineClmpd` (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values.](04_FunctionsAndParametersSpecification_files/figure-html/fig-SelSplineClmpd-1.png){#fig-SelSplineClmpd width=576}\n:::\n:::\n\n\n##### Left-clamped splines\n\nThe `selSplineClmpdLeft` function, with signature `(z,params,knots,debug=FALSE)`, is used to represent size-specific selectivity with a spline that is clamped at small sizes (i.e., the left end).  `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSplineClmpdLeft].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Left-clamped spline function `selSplineClmpdLeft` (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values.](04_FunctionsAndParametersSpecification_files/figure-html/fig-SelSplineClmpdLeft-1.png){#fig-SelSplineClmpdLeft width=576}\n:::\n:::\n\n\n\n##### Right-clamped splines\n\nThe `selSplineClmpdRight` function, with signature `(z,params,knots,debug=FALSE)`, is used to represent size-specific selectivity with a spline that is clamped at large sizes (i.e., the right end). `params` is a k-length advector representing the logit-scale values of the estimated selectivity curve at the `k` knots. The knot locations are given by the first `k` values of the `consts` vector. An example is given in Figure [-@fig-SelSplineClmpdRight].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The right-clamped spline function `selSplineClmpdRight` (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the spline function fit to the 'true' values.](04_FunctionsAndParametersSpecification_files/figure-html/fig-SelSplineClmpdRight-1.png){#fig-SelSplineClmpdRight width=576}\n:::\n:::\n\n\n### Other selectivity functions {#sec-OtherSelFcns}\n\nMiscellaneous selectivity functions described in this section include: a constant function and a \"stacked\" logistic function.\n\n#### Constant selectivity {#sec-ConstSel}\n\nThe `const_sel` function ([@fig-SelConst]) is used to represent selectivity that is not size-specific (i.e.., the same at all sizes). It has a signature `(z,params,consts)` to match other functions, although `consts` is ignored (if `consts[1]` were used as a reference size, the function would be non-differentiable). \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Constant selectivity function (green dotted line) fit to a constant with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the function fit to the 'true' values. Here, `params` = 1.](04_FunctionsAndParametersSpecification_files/figure-html/fig-SelConst-1.png){#fig-SelConst width=576}\n:::\n:::\n\n\n#### Stacked logistic\n\nThe `stackedLogistic1` function ([@fig-StackedLogistic]) provides a 5-parameter selectivity function that is formed using two ascending logistic curves, with one stacked atop the other. The function is parameterized by a weighting factor on the first curve (`omega`), the size at the inflection point of the first logistic curve (`mnZ1`), the width of the first logistic curve (`sdZ1`), the size at the inflection point of the second logistic curve (`mnZ2`), and the width of the second logistic curve (`sdZ2`). `params` is the vector (`omega`,`mnZ1`,`sdZ1`,`mnZ2`,`sdZ2`). The value of `consts` is ignored.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The stacked logistic selectivity function (green dotted line) fit to a constant with additive noise (observed=red; underlying 'true' R function=blue). The solid green line represents the function fit to the 'true' values. Here, `params` = (0.2,75,10,145,10).](04_FunctionsAndParametersSpecification_files/figure-html/fig-StackedLogistic-1.png){#fig-StackedLogistic width=576}\n:::\n:::\n\n\n## Fishing mortality {#sec-FM}\n\n## Survey catchability {#sec-Srv}\n\n",
    "supporting": [
      "04_FunctionsAndParametersSpecification_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}