[
  {
    "objectID": "website/05_ADMB-InputFiles.html",
    "href": "website/05_ADMB-InputFiles.html",
    "title": "Using ADMB Input Files",
    "section": "",
    "text": "The ADMB version of gmacs required four files to define and run a model: the “gmacs.dat” file, a data file (the “dat” file), a control file (the “ctl” file), and a projection file (the “prj” file). As discussed below, these files can be read using functions available in the rtmbGMACS package, simplifying conversion of models from ADMB to RTMB.\n\n\nA ADMB “gmacs.dat” can be read using the readADMB_DatFile function. This file specifies the filenames of the dat, ctl, and prj files for a model run, as well as other information such as stock name, units of weight and abundance, and various options for running the ADMB model. The readADMB_DatFile function returns the information from this file as a named list, with elements\n\ninput files: a character vector with the path/filenames for the “dat”, “ctl”, and “prj” files\nunits: a named character vector specifying units for biomass (wgt) and abundance (num)\nstock: the name of the crab stock\njitter info: a numeric vector with elements\n\n(1): a flag indicating whether (1) or not (0) to jitter the initial parameter values\n(2): the standard deviation for the jitter randomization\n\nvariances to export: a numeric vector with values indicating whether (1) or not (0) to include uncertainty estimates for\n\nreference points\nrecruits\nSSB\nFbar: mean F\nOutDynB0: dynamic B0 output\n\nretro peel: the number of years to “peel back” the model end year for a retrospective model run\nother: a named list with elements specifying other options for the model run\n\nThe returned list has a “type” attribute set to “admb dat file inputs”.\n\n\n\nThe ADMB “dat” file includes all the data to be included in an ADMB gmacs model run. The ADMB version of gmacs is capable of including the following data types in the model optimization:\n\nfishery catch and effort time series data\nindex (survey or fishery cpue) biomass and abundance time series data\nsize composition data\ngrowth (molt increment) data\nmaturity ogive data\ntagging data (for growth)\nenvironmental data time series\n\nData files created for the ADMB version of gmacs can be read using the package function readADMB_DataFile. The result is a named list of dataframes (tibbles, actually) representing the input data. Elements include\n\ndfrCD: dataframe with all fishery catch time series data\ndfrID: dataframe with all index time series data\ndfrZCD: dataframe with all size comps data\ndfrGrD: dataframe with all growth data\ndfrMOD: dataframe with all maturity ogive data\ndfrTD: dataframe with all tagging data\ndfrED: dataframe with all environmental data time series\neffort data?? &lt;-TODO\n\nThe returned list has a “type” attribute set to “admb input data list”.\n\n\n\nThe ADMB “ctl” file describes the model parameterization, allowing the user to choose functions to describe model processes, specify which parameters are estimated or fixed, assign time blocks and priors, and define random walk behavior or environmental covariate structure. A function to convert the ADMB gmacs parameterization to an equivalent rtmbGMACS parameterization will be developed in the future.\n\n\n\nThe ADMB “prj” file describes how projections (if any) should be conducted after a model has been optimized. the readADMB_PrjFile function can be used to read “prj” files and returns a named list with elements\n\noptMSY: integer flag indicating whether to use MSY or an MSY proxy\ndfrOptsFixedF: dataframe indicating which fleets have F’s fixed for the OFL calculations\ndfrOptsTBs: dataframe with time blocks for the OFL calculations\ndfrOptsOFL: dataframe with the OFL calculation options\ndfrOptsPrj: dataframe with the projection options\ndfrOptsHSs: dataframe with the state harvest strategy options\noptMaxMCMC: max number of MCMC draws\noptFullDiagnostics: flag to print full diagnostics\n\nThe returned list has a “type” attribute set to “admb prj file inputs”.",
    "crumbs": [
      "Using ADMB Input files"
    ]
  },
  {
    "objectID": "website/05_ADMB-InputFiles.html#admb-input-files",
    "href": "website/05_ADMB-InputFiles.html#admb-input-files",
    "title": "Using ADMB Input Files",
    "section": "",
    "text": "The ADMB version of gmacs required four files to define and run a model: the “gmacs.dat” file, a data file (the “dat” file), a control file (the “ctl” file), and a projection file (the “prj” file). As discussed below, these files can be read using functions available in the rtmbGMACS package, simplifying conversion of models from ADMB to RTMB.\n\n\nA ADMB “gmacs.dat” can be read using the readADMB_DatFile function. This file specifies the filenames of the dat, ctl, and prj files for a model run, as well as other information such as stock name, units of weight and abundance, and various options for running the ADMB model. The readADMB_DatFile function returns the information from this file as a named list, with elements\n\ninput files: a character vector with the path/filenames for the “dat”, “ctl”, and “prj” files\nunits: a named character vector specifying units for biomass (wgt) and abundance (num)\nstock: the name of the crab stock\njitter info: a numeric vector with elements\n\n(1): a flag indicating whether (1) or not (0) to jitter the initial parameter values\n(2): the standard deviation for the jitter randomization\n\nvariances to export: a numeric vector with values indicating whether (1) or not (0) to include uncertainty estimates for\n\nreference points\nrecruits\nSSB\nFbar: mean F\nOutDynB0: dynamic B0 output\n\nretro peel: the number of years to “peel back” the model end year for a retrospective model run\nother: a named list with elements specifying other options for the model run\n\nThe returned list has a “type” attribute set to “admb dat file inputs”.\n\n\n\nThe ADMB “dat” file includes all the data to be included in an ADMB gmacs model run. The ADMB version of gmacs is capable of including the following data types in the model optimization:\n\nfishery catch and effort time series data\nindex (survey or fishery cpue) biomass and abundance time series data\nsize composition data\ngrowth (molt increment) data\nmaturity ogive data\ntagging data (for growth)\nenvironmental data time series\n\nData files created for the ADMB version of gmacs can be read using the package function readADMB_DataFile. The result is a named list of dataframes (tibbles, actually) representing the input data. Elements include\n\ndfrCD: dataframe with all fishery catch time series data\ndfrID: dataframe with all index time series data\ndfrZCD: dataframe with all size comps data\ndfrGrD: dataframe with all growth data\ndfrMOD: dataframe with all maturity ogive data\ndfrTD: dataframe with all tagging data\ndfrED: dataframe with all environmental data time series\neffort data?? &lt;-TODO\n\nThe returned list has a “type” attribute set to “admb input data list”.\n\n\n\nThe ADMB “ctl” file describes the model parameterization, allowing the user to choose functions to describe model processes, specify which parameters are estimated or fixed, assign time blocks and priors, and define random walk behavior or environmental covariate structure. A function to convert the ADMB gmacs parameterization to an equivalent rtmbGMACS parameterization will be developed in the future.\n\n\n\nThe ADMB “prj” file describes how projections (if any) should be conducted after a model has been optimized. the readADMB_PrjFile function can be used to read “prj” files and returns a named list with elements\n\noptMSY: integer flag indicating whether to use MSY or an MSY proxy\ndfrOptsFixedF: dataframe indicating which fleets have F’s fixed for the OFL calculations\ndfrOptsTBs: dataframe with time blocks for the OFL calculations\ndfrOptsOFL: dataframe with the OFL calculation options\ndfrOptsPrj: dataframe with the projection options\ndfrOptsHSs: dataframe with the state harvest strategy options\noptMaxMCMC: max number of MCMC draws\noptFullDiagnostics: flag to print full diagnostics\n\nThe returned list has a “type” attribute set to “admb prj file inputs”.",
    "crumbs": [
      "Using ADMB Input files"
    ]
  },
  {
    "objectID": "website/03_ModelDimensions.html",
    "href": "website/03_ModelDimensions.html",
    "title": "Model Dimensions",
    "section": "",
    "text": "The RTMB version of the GMACS framework makes a distinction between intrinsic model dimensions and user dimensions. Intrinsic model dimensions constitute the set of dimensions with which every GMACS model is defined internally. The following table lists the intrinsic dimensions in the GMACS framework:\n\n  tbl = tibble::tribble(~id,~description,\n                          \"y\",\"year\",\n                          \"s\",\"season\",\n                          \"r\",\"region (spatial area)\",\n                          \"x\",\"sex\",\n                          \"m\",\"maturity state\",\n                          \"a\",\"age (post-recruitment)\",\n                          \"p\",\"post-molt age\",\n                          \"z\",\"size\");\n  tbl |&gt; kableExtra::kbl() |&gt; \n        kableExtra::kable_styling(bootstrap_options=\"striped\",\n                                  latex_options = c(\"striped\",\"scaled down\"))\n\n\n\nTable 1: Intrinsic dimensions defined in the GMACS framework.\n\n\n\n\n\n\nid\ndescription\n\n\n\n\ny\nyear\n\n\ns\nseason\n\n\nr\nregion (spatial area)\n\n\nx\nsex\n\n\nm\nmaturity state\n\n\na\nage (post-recruitment)\n\n\np\npost-molt age\n\n\nz\nsize\n\n\n\n\n\n\n\n\n\n\nUsers of the original (i.e., ADMB) version of GMACS will note that “shell condition” is absent as a dimension: post-molt age can provide a somewhat more finely-grained characterization of shell age than simply “new shell”/“old shell”. Including age and post-molt age as dimensions also allows an explicit characterization of age-based processes (e.g., maximum age limits). Maximum age or post-molt age bins can be defined as terminal or accumulator bins.\n\n\n\nUser dimensions consist of subsets of the intrinsic dimensions and are used as a shorthand to define dimensions for a particular model, parameter set, or dataset. Within the GMACS code, user dimensions \\(\\mathbb{U}\\) are expanded to the intrinsic dimensions \\(\\mathbb{I}\\) in a fashion similar to a right join \\(\\mathbb{U} \\ltimes \\mathbb{I}\\). When defining a model’s dimensions, the user’s given dimensions are expanded to the set of intrinsic dimensions, with non-specified dimensions having a size of 1 and a default value or label.\nFor a given year, population abundance is integrated across seasons within the year and different processes (e.g., natural mortality, growth, fishing, surveys) can occur in different seasons. Model dimensions setup consists of specifying the years of interest (\\(y\\)), the within-years seasons (\\(s\\)) over which the model will be integrated, and a set of categories (\\(\\{c\\}\\)) into which the population is divided (e.g., region, sex, and size). When specifying model dimensions, levels within a given population category can be nested within another category (e.g., different size classes might be defined for males and females if, for example, they exhibited substantially different growth patterns). In addition to intrinsic and user model dimensions, two other types of model dimensions are distinguished: sparse and dense. A set of dimensions is characterized as sparse when different levels of one dimension are nested within the levels of another dimension such that the resulting set of levels has fewer members in it than the set of dimensions resulting from a complete crossing of all unique dimension levels. The latter set of (fully-crossed) dimensions is characterized as dense.\nOn the R side of things, a special dataframe (actually, a tibble) referred to as a “dimension map” is used to characterize any set of dimensions, either intrinsic or user, sparse or dense.The first column in the model dimensions map is simply the row number associated with the unique combination of dimension levels the row reflects. It also provides the index into the population abundance vector for that combination of dimensions (and thus allows the extraction of the associated dimension levels given the index value). The remaining columns correspond to individual dimensions; for each column, the value for each row is the level (as a factor) of the associated dimension. Rows are ordered by the combination of factor levels across the dimensions, with levels changing the fastest in the right-most column.\nA dimensions map also has four non-standard attributes: dmtyp, dmnms, dmlvs, and dmlns:\n\ndmtyp identifies the type of dimensions (intrinsic or user, sparse or dense)\ndmnms is a character vector with the dimension names.\ndmlvs is a named list of character vectors comprising the unique levels for each dimension.\ndmlns is a named integer vector with the length (number of unique levels) of each dimension.\n\nGiven a sparse dimensions map, the corresponding dense map can be obtained by a full crossing of the levels in the sparse map’s dmlvs attribute.\nMost model quantities are represented as vectors, and thus have associated dimensions maps in order to be able to identify the dimension levels associated with each index value.\n\n\nSparse dimensions are defined using the R function createSparseDimsMap. As an example (Table 2), the following creates a set of dimensions encompassing year (y), season(s), sex (x), and size (z), with different size classes for males and females. Note that the “dimension name(s)” must be added as an attribute dmnms to the vector or list defining the levels.\n\n#&gt; Create the individual dimensions as vectors or lists (for nested dimensions)\n#&gt; --assign the attribute \"dmnms\", the dimension name(s) (plural if nested)\n#&gt; ----model years\nvYs = 2001:2005;                  attr(vYs,\"dmnms\")&lt;-\"y\";\n#&gt; ----model seasons\nvSs = c(\"fall\",\"spring\");         attr(vSs,\"dmnms\")&lt;-\"s\";\n#&gt; ----model sexes\nvXs = c(\"MALE\",\"FEMALE\");         attr(vXs,\"dmnms\")&lt;-\"x\";\n#&gt; ----model sizes, nested with sexes\nvZs = list(  MALE=seq(40,60,5),\n           FEMALE=seq(25,50,5));  attr(vZs,\"dmnms\")&lt;-c(\"x\",\"z\");\n#&gt;--create the dimensions \"map\"\ndmsSparse = createSparseDimsMap(y=vYs,s=vSs,x=vXs,z=vZs);\ndmsSparse |&gt; kableExtra::kbl(booktabs=TRUE,longtable=TRUE);\n\n\n\nTable 2: Example sparse dimensions map.\n\n\n\n\n\n\nsparse_idx\ny\ns\nx\nz\n\n\n\n\n1\n2001\nfall\nFEMALE\n25\n\n\n2\n2001\nfall\nFEMALE\n30\n\n\n3\n2001\nfall\nFEMALE\n35\n\n\n4\n2001\nfall\nFEMALE\n40\n\n\n5\n2001\nfall\nFEMALE\n45\n\n\n6\n2001\nfall\nFEMALE\n50\n\n\n7\n2001\nfall\nMALE\n40\n\n\n8\n2001\nfall\nMALE\n45\n\n\n9\n2001\nfall\nMALE\n50\n\n\n10\n2001\nfall\nMALE\n55\n\n\n11\n2001\nfall\nMALE\n60\n\n\n12\n2001\nspring\nFEMALE\n25\n\n\n13\n2001\nspring\nFEMALE\n30\n\n\n14\n2001\nspring\nFEMALE\n35\n\n\n15\n2001\nspring\nFEMALE\n40\n\n\n16\n2001\nspring\nFEMALE\n45\n\n\n17\n2001\nspring\nFEMALE\n50\n\n\n18\n2001\nspring\nMALE\n40\n\n\n19\n2001\nspring\nMALE\n45\n\n\n20\n2001\nspring\nMALE\n50\n\n\n21\n2001\nspring\nMALE\n55\n\n\n22\n2001\nspring\nMALE\n60\n\n\n23\n2002\nfall\nFEMALE\n25\n\n\n24\n2002\nfall\nFEMALE\n30\n\n\n25\n2002\nfall\nFEMALE\n35\n\n\n26\n2002\nfall\nFEMALE\n40\n\n\n27\n2002\nfall\nFEMALE\n45\n\n\n28\n2002\nfall\nFEMALE\n50\n\n\n29\n2002\nfall\nMALE\n40\n\n\n30\n2002\nfall\nMALE\n45\n\n\n31\n2002\nfall\nMALE\n50\n\n\n32\n2002\nfall\nMALE\n55\n\n\n33\n2002\nfall\nMALE\n60\n\n\n34\n2002\nspring\nFEMALE\n25\n\n\n35\n2002\nspring\nFEMALE\n30\n\n\n36\n2002\nspring\nFEMALE\n35\n\n\n37\n2002\nspring\nFEMALE\n40\n\n\n38\n2002\nspring\nFEMALE\n45\n\n\n39\n2002\nspring\nFEMALE\n50\n\n\n40\n2002\nspring\nMALE\n40\n\n\n41\n2002\nspring\nMALE\n45\n\n\n42\n2002\nspring\nMALE\n50\n\n\n43\n2002\nspring\nMALE\n55\n\n\n44\n2002\nspring\nMALE\n60\n\n\n45\n2003\nfall\nFEMALE\n25\n\n\n46\n2003\nfall\nFEMALE\n30\n\n\n47\n2003\nfall\nFEMALE\n35\n\n\n48\n2003\nfall\nFEMALE\n40\n\n\n49\n2003\nfall\nFEMALE\n45\n\n\n50\n2003\nfall\nFEMALE\n50\n\n\n51\n2003\nfall\nMALE\n40\n\n\n52\n2003\nfall\nMALE\n45\n\n\n53\n2003\nfall\nMALE\n50\n\n\n54\n2003\nfall\nMALE\n55\n\n\n55\n2003\nfall\nMALE\n60\n\n\n56\n2003\nspring\nFEMALE\n25\n\n\n57\n2003\nspring\nFEMALE\n30\n\n\n58\n2003\nspring\nFEMALE\n35\n\n\n59\n2003\nspring\nFEMALE\n40\n\n\n60\n2003\nspring\nFEMALE\n45\n\n\n61\n2003\nspring\nFEMALE\n50\n\n\n62\n2003\nspring\nMALE\n40\n\n\n63\n2003\nspring\nMALE\n45\n\n\n64\n2003\nspring\nMALE\n50\n\n\n65\n2003\nspring\nMALE\n55\n\n\n66\n2003\nspring\nMALE\n60\n\n\n67\n2004\nfall\nFEMALE\n25\n\n\n68\n2004\nfall\nFEMALE\n30\n\n\n69\n2004\nfall\nFEMALE\n35\n\n\n70\n2004\nfall\nFEMALE\n40\n\n\n71\n2004\nfall\nFEMALE\n45\n\n\n72\n2004\nfall\nFEMALE\n50\n\n\n73\n2004\nfall\nMALE\n40\n\n\n74\n2004\nfall\nMALE\n45\n\n\n75\n2004\nfall\nMALE\n50\n\n\n76\n2004\nfall\nMALE\n55\n\n\n77\n2004\nfall\nMALE\n60\n\n\n78\n2004\nspring\nFEMALE\n25\n\n\n79\n2004\nspring\nFEMALE\n30\n\n\n80\n2004\nspring\nFEMALE\n35\n\n\n81\n2004\nspring\nFEMALE\n40\n\n\n82\n2004\nspring\nFEMALE\n45\n\n\n83\n2004\nspring\nFEMALE\n50\n\n\n84\n2004\nspring\nMALE\n40\n\n\n85\n2004\nspring\nMALE\n45\n\n\n86\n2004\nspring\nMALE\n50\n\n\n87\n2004\nspring\nMALE\n55\n\n\n88\n2004\nspring\nMALE\n60\n\n\n89\n2005\nfall\nFEMALE\n25\n\n\n90\n2005\nfall\nFEMALE\n30\n\n\n91\n2005\nfall\nFEMALE\n35\n\n\n92\n2005\nfall\nFEMALE\n40\n\n\n93\n2005\nfall\nFEMALE\n45\n\n\n94\n2005\nfall\nFEMALE\n50\n\n\n95\n2005\nfall\nMALE\n40\n\n\n96\n2005\nfall\nMALE\n45\n\n\n97\n2005\nfall\nMALE\n50\n\n\n98\n2005\nfall\nMALE\n55\n\n\n99\n2005\nfall\nMALE\n60\n\n\n100\n2005\nspring\nFEMALE\n25\n\n\n101\n2005\nspring\nFEMALE\n30\n\n\n102\n2005\nspring\nFEMALE\n35\n\n\n103\n2005\nspring\nFEMALE\n40\n\n\n104\n2005\nspring\nFEMALE\n45\n\n\n105\n2005\nspring\nFEMALE\n50\n\n\n106\n2005\nspring\nMALE\n40\n\n\n107\n2005\nspring\nMALE\n45\n\n\n108\n2005\nspring\nMALE\n50\n\n\n109\n2005\nspring\nMALE\n55\n\n\n110\n2005\nspring\nMALE\n60\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a sparse dimensions map dmsSparse, the associated dense map can be created using the R function createDenseDimsMap:\n\n\n\n\nTable 3: Example dense dimensions map (first 20 rows) corrseponding to the previous sparse dimensions map.\n\n\n\n\n\n\ndense_idx\ny\ns\nx\nz\n\n\n\n\n1\n2001\nfall\nFEMALE\n25\n\n\n2\n2001\nfall\nFEMALE\n30\n\n\n3\n2001\nfall\nFEMALE\n35\n\n\n4\n2001\nfall\nFEMALE\n40\n\n\n5\n2001\nfall\nFEMALE\n45\n\n\n6\n2001\nfall\nFEMALE\n50\n\n\n7\n2001\nfall\nFEMALE\n55\n\n\n8\n2001\nfall\nFEMALE\n60\n\n\n9\n2001\nfall\nMALE\n25\n\n\n10\n2001\nfall\nMALE\n30\n\n\n11\n2001\nfall\nMALE\n35\n\n\n12\n2001\nfall\nMALE\n40\n\n\n13\n2001\nfall\nMALE\n45\n\n\n14\n2001\nfall\nMALE\n50\n\n\n15\n2001\nfall\nMALE\n55\n\n\n16\n2001\nfall\nMALE\n60\n\n\n17\n2001\nspring\nFEMALE\n25\n\n\n18\n2001\nspring\nFEMALE\n30\n\n\n19\n2001\nspring\nFEMALE\n35\n\n\n20\n2001\nspring\nFEMALE\n40\n\n\n\n\n\n\n\n\n\n\nIn the above example, the size (number of rows) of the resulting dense dimensions map (160) is larger than that of the nested dimensions map (110) because of the different size bins defined for males and females.\n\n\n\nData fit in GMACS typically represent quantities aggregated over some combination of population categories, so it is necessary to determine the mapping from model indices to data indices. The function createAggregatorMap provides the required mapping of 1-d indices from one dimensions map to another, as illustrated in the following example (Table 4) using the dimensions map dmsDense from the previous example:\n\n#&gt; Example of how to create an aggregator map using \"dmsDense\" from above\n#&gt; to aggregate by year (y) and sex (x) over season (s) and size (z). \n#&gt;    Create dimensions map with only y and x\n  aggDims = keepDims(dmsDense,keep=c(\"y\",\"x\"));#--keeps only y and x dimensions, recreates 1-d vector index\n#&gt;    Create aggregator map from y,x,s,z to y,x\n  aggMap  = createAggregatorMap(dmsDense,aggDims,keepOrigDims=TRUE);\n\nidx_to is the vector index for aggMap, idx_from is the vector index for dmsDense.\n\n\n\n\nTable 4: Example aggregator map (from indices idx_frm to indices idx_to).\n\n\n\n\n\n\nidx_to\nidx_from\ny\ns\nx\nz\n\n\n\n\n1\n1\n2001\nfall\nFEMALE\n25\n\n\n1\n2\n2001\nfall\nFEMALE\n30\n\n\n1\n3\n2001\nfall\nFEMALE\n35\n\n\n1\n4\n2001\nfall\nFEMALE\n40\n\n\n1\n5\n2001\nfall\nFEMALE\n45\n\n\n1\n6\n2001\nfall\nFEMALE\n50\n\n\n1\n7\n2001\nfall\nFEMALE\n55\n\n\n1\n8\n2001\nfall\nFEMALE\n60\n\n\n2\n9\n2001\nfall\nMALE\n25\n\n\n2\n10\n2001\nfall\nMALE\n30\n\n\n2\n11\n2001\nfall\nMALE\n35\n\n\n2\n12\n2001\nfall\nMALE\n40\n\n\n2\n13\n2001\nfall\nMALE\n45\n\n\n2\n14\n2001\nfall\nMALE\n50\n\n\n2\n15\n2001\nfall\nMALE\n55\n\n\n2\n16\n2001\nfall\nMALE\n60\n\n\n1\n17\n2001\nspring\nFEMALE\n25\n\n\n1\n18\n2001\nspring\nFEMALE\n30\n\n\n1\n19\n2001\nspring\nFEMALE\n35\n\n\n1\n20\n2001\nspring\nFEMALE\n40\n\n\n1\n21\n2001\nspring\nFEMALE\n45\n\n\n1\n22\n2001\nspring\nFEMALE\n50\n\n\n1\n23\n2001\nspring\nFEMALE\n55\n\n\n1\n24\n2001\nspring\nFEMALE\n60\n\n\n2\n25\n2001\nspring\nMALE\n25\n\n\n2\n26\n2001\nspring\nMALE\n30\n\n\n2\n27\n2001\nspring\nMALE\n35\n\n\n2\n28\n2001\nspring\nMALE\n40\n\n\n2\n29\n2001\nspring\nMALE\n45\n\n\n2\n30\n2001\nspring\nMALE\n50\n\n\n2\n31\n2001\nspring\nMALE\n55\n\n\n2\n32\n2001\nspring\nMALE\n60\n\n\n3\n33\n2002\nfall\nFEMALE\n25\n\n\n3\n34\n2002\nfall\nFEMALE\n30\n\n\n3\n35\n2002\nfall\nFEMALE\n35\n\n\n3\n36\n2002\nfall\nFEMALE\n40\n\n\n3\n37\n2002\nfall\nFEMALE\n45\n\n\n3\n38\n2002\nfall\nFEMALE\n50\n\n\n3\n39\n2002\nfall\nFEMALE\n55\n\n\n3\n40\n2002\nfall\nFEMALE\n60\n\n\n4\n41\n2002\nfall\nMALE\n25\n\n\n4\n42\n2002\nfall\nMALE\n30\n\n\n4\n43\n2002\nfall\nMALE\n35\n\n\n4\n44\n2002\nfall\nMALE\n40\n\n\n4\n45\n2002\nfall\nMALE\n45\n\n\n4\n46\n2002\nfall\nMALE\n50\n\n\n4\n47\n2002\nfall\nMALE\n55\n\n\n4\n48\n2002\nfall\nMALE\n60\n\n\n3\n49\n2002\nspring\nFEMALE\n25\n\n\n3\n50\n2002\nspring\nFEMALE\n30\n\n\n3\n51\n2002\nspring\nFEMALE\n35\n\n\n3\n52\n2002\nspring\nFEMALE\n40\n\n\n3\n53\n2002\nspring\nFEMALE\n45\n\n\n3\n54\n2002\nspring\nFEMALE\n50\n\n\n3\n55\n2002\nspring\nFEMALE\n55\n\n\n3\n56\n2002\nspring\nFEMALE\n60\n\n\n4\n57\n2002\nspring\nMALE\n25\n\n\n4\n58\n2002\nspring\nMALE\n30\n\n\n4\n59\n2002\nspring\nMALE\n35\n\n\n4\n60\n2002\nspring\nMALE\n40\n\n\n4\n61\n2002\nspring\nMALE\n45\n\n\n4\n62\n2002\nspring\nMALE\n50\n\n\n4\n63\n2002\nspring\nMALE\n55\n\n\n4\n64\n2002\nspring\nMALE\n60\n\n\n5\n65\n2003\nfall\nFEMALE\n25\n\n\n5\n66\n2003\nfall\nFEMALE\n30\n\n\n5\n67\n2003\nfall\nFEMALE\n35\n\n\n5\n68\n2003\nfall\nFEMALE\n40\n\n\n5\n69\n2003\nfall\nFEMALE\n45\n\n\n5\n70\n2003\nfall\nFEMALE\n50\n\n\n5\n71\n2003\nfall\nFEMALE\n55\n\n\n5\n72\n2003\nfall\nFEMALE\n60\n\n\n6\n73\n2003\nfall\nMALE\n25\n\n\n6\n74\n2003\nfall\nMALE\n30\n\n\n6\n75\n2003\nfall\nMALE\n35\n\n\n6\n76\n2003\nfall\nMALE\n40\n\n\n6\n77\n2003\nfall\nMALE\n45\n\n\n6\n78\n2003\nfall\nMALE\n50\n\n\n6\n79\n2003\nfall\nMALE\n55\n\n\n6\n80\n2003\nfall\nMALE\n60\n\n\n5\n81\n2003\nspring\nFEMALE\n25\n\n\n5\n82\n2003\nspring\nFEMALE\n30\n\n\n5\n83\n2003\nspring\nFEMALE\n35\n\n\n5\n84\n2003\nspring\nFEMALE\n40\n\n\n5\n85\n2003\nspring\nFEMALE\n45\n\n\n5\n86\n2003\nspring\nFEMALE\n50\n\n\n5\n87\n2003\nspring\nFEMALE\n55\n\n\n5\n88\n2003\nspring\nFEMALE\n60\n\n\n6\n89\n2003\nspring\nMALE\n25\n\n\n6\n90\n2003\nspring\nMALE\n30\n\n\n6\n91\n2003\nspring\nMALE\n35\n\n\n6\n92\n2003\nspring\nMALE\n40\n\n\n6\n93\n2003\nspring\nMALE\n45\n\n\n6\n94\n2003\nspring\nMALE\n50\n\n\n6\n95\n2003\nspring\nMALE\n55\n\n\n6\n96\n2003\nspring\nMALE\n60\n\n\n7\n97\n2004\nfall\nFEMALE\n25\n\n\n7\n98\n2004\nfall\nFEMALE\n30\n\n\n7\n99\n2004\nfall\nFEMALE\n35\n\n\n7\n100\n2004\nfall\nFEMALE\n40\n\n\n7\n101\n2004\nfall\nFEMALE\n45\n\n\n7\n102\n2004\nfall\nFEMALE\n50\n\n\n7\n103\n2004\nfall\nFEMALE\n55\n\n\n7\n104\n2004\nfall\nFEMALE\n60\n\n\n8\n105\n2004\nfall\nMALE\n25\n\n\n8\n106\n2004\nfall\nMALE\n30\n\n\n8\n107\n2004\nfall\nMALE\n35\n\n\n8\n108\n2004\nfall\nMALE\n40\n\n\n8\n109\n2004\nfall\nMALE\n45\n\n\n8\n110\n2004\nfall\nMALE\n50\n\n\n8\n111\n2004\nfall\nMALE\n55\n\n\n8\n112\n2004\nfall\nMALE\n60\n\n\n7\n113\n2004\nspring\nFEMALE\n25\n\n\n7\n114\n2004\nspring\nFEMALE\n30\n\n\n7\n115\n2004\nspring\nFEMALE\n35\n\n\n7\n116\n2004\nspring\nFEMALE\n40\n\n\n7\n117\n2004\nspring\nFEMALE\n45\n\n\n7\n118\n2004\nspring\nFEMALE\n50\n\n\n7\n119\n2004\nspring\nFEMALE\n55\n\n\n7\n120\n2004\nspring\nFEMALE\n60\n\n\n8\n121\n2004\nspring\nMALE\n25\n\n\n8\n122\n2004\nspring\nMALE\n30\n\n\n8\n123\n2004\nspring\nMALE\n35\n\n\n8\n124\n2004\nspring\nMALE\n40\n\n\n8\n125\n2004\nspring\nMALE\n45\n\n\n8\n126\n2004\nspring\nMALE\n50\n\n\n8\n127\n2004\nspring\nMALE\n55\n\n\n8\n128\n2004\nspring\nMALE\n60\n\n\n9\n129\n2005\nfall\nFEMALE\n25\n\n\n9\n130\n2005\nfall\nFEMALE\n30\n\n\n9\n131\n2005\nfall\nFEMALE\n35\n\n\n9\n132\n2005\nfall\nFEMALE\n40\n\n\n9\n133\n2005\nfall\nFEMALE\n45\n\n\n9\n134\n2005\nfall\nFEMALE\n50\n\n\n9\n135\n2005\nfall\nFEMALE\n55\n\n\n9\n136\n2005\nfall\nFEMALE\n60\n\n\n10\n137\n2005\nfall\nMALE\n25\n\n\n10\n138\n2005\nfall\nMALE\n30\n\n\n10\n139\n2005\nfall\nMALE\n35\n\n\n10\n140\n2005\nfall\nMALE\n40\n\n\n10\n141\n2005\nfall\nMALE\n45\n\n\n10\n142\n2005\nfall\nMALE\n50\n\n\n10\n143\n2005\nfall\nMALE\n55\n\n\n10\n144\n2005\nfall\nMALE\n60\n\n\n9\n145\n2005\nspring\nFEMALE\n25\n\n\n9\n146\n2005\nspring\nFEMALE\n30\n\n\n9\n147\n2005\nspring\nFEMALE\n35\n\n\n9\n148\n2005\nspring\nFEMALE\n40\n\n\n9\n149\n2005\nspring\nFEMALE\n45\n\n\n9\n150\n2005\nspring\nFEMALE\n50\n\n\n9\n151\n2005\nspring\nFEMALE\n55\n\n\n9\n152\n2005\nspring\nFEMALE\n60\n\n\n10\n153\n2005\nspring\nMALE\n25\n\n\n10\n154\n2005\nspring\nMALE\n30\n\n\n10\n155\n2005\nspring\nMALE\n35\n\n\n10\n156\n2005\nspring\nMALE\n40\n\n\n10\n157\n2005\nspring\nMALE\n45\n\n\n10\n158\n2005\nspring\nMALE\n50\n\n\n10\n159\n2005\nspring\nMALE\n55\n\n\n10\n160\n2005\nspring\nMALE\n60",
    "crumbs": [
      "Model Dimensions"
    ]
  },
  {
    "objectID": "website/03_ModelDimensions.html#intrinsic-model-dimensions",
    "href": "website/03_ModelDimensions.html#intrinsic-model-dimensions",
    "title": "Model Dimensions",
    "section": "",
    "text": "The RTMB version of the GMACS framework makes a distinction between intrinsic model dimensions and user dimensions. Intrinsic model dimensions constitute the set of dimensions with which every GMACS model is defined internally. The following table lists the intrinsic dimensions in the GMACS framework:\n\n  tbl = tibble::tribble(~id,~description,\n                          \"y\",\"year\",\n                          \"s\",\"season\",\n                          \"r\",\"region (spatial area)\",\n                          \"x\",\"sex\",\n                          \"m\",\"maturity state\",\n                          \"a\",\"age (post-recruitment)\",\n                          \"p\",\"post-molt age\",\n                          \"z\",\"size\");\n  tbl |&gt; kableExtra::kbl() |&gt; \n        kableExtra::kable_styling(bootstrap_options=\"striped\",\n                                  latex_options = c(\"striped\",\"scaled down\"))\n\n\n\nTable 1: Intrinsic dimensions defined in the GMACS framework.\n\n\n\n\n\n\nid\ndescription\n\n\n\n\ny\nyear\n\n\ns\nseason\n\n\nr\nregion (spatial area)\n\n\nx\nsex\n\n\nm\nmaturity state\n\n\na\nage (post-recruitment)\n\n\np\npost-molt age\n\n\nz\nsize\n\n\n\n\n\n\n\n\n\n\nUsers of the original (i.e., ADMB) version of GMACS will note that “shell condition” is absent as a dimension: post-molt age can provide a somewhat more finely-grained characterization of shell age than simply “new shell”/“old shell”. Including age and post-molt age as dimensions also allows an explicit characterization of age-based processes (e.g., maximum age limits). Maximum age or post-molt age bins can be defined as terminal or accumulator bins.",
    "crumbs": [
      "Model Dimensions"
    ]
  },
  {
    "objectID": "website/03_ModelDimensions.html#user-dimensions",
    "href": "website/03_ModelDimensions.html#user-dimensions",
    "title": "Model Dimensions",
    "section": "",
    "text": "User dimensions consist of subsets of the intrinsic dimensions and are used as a shorthand to define dimensions for a particular model, parameter set, or dataset. Within the GMACS code, user dimensions \\(\\mathbb{U}\\) are expanded to the intrinsic dimensions \\(\\mathbb{I}\\) in a fashion similar to a right join \\(\\mathbb{U} \\ltimes \\mathbb{I}\\). When defining a model’s dimensions, the user’s given dimensions are expanded to the set of intrinsic dimensions, with non-specified dimensions having a size of 1 and a default value or label.\nFor a given year, population abundance is integrated across seasons within the year and different processes (e.g., natural mortality, growth, fishing, surveys) can occur in different seasons. Model dimensions setup consists of specifying the years of interest (\\(y\\)), the within-years seasons (\\(s\\)) over which the model will be integrated, and a set of categories (\\(\\{c\\}\\)) into which the population is divided (e.g., region, sex, and size). When specifying model dimensions, levels within a given population category can be nested within another category (e.g., different size classes might be defined for males and females if, for example, they exhibited substantially different growth patterns). In addition to intrinsic and user model dimensions, two other types of model dimensions are distinguished: sparse and dense. A set of dimensions is characterized as sparse when different levels of one dimension are nested within the levels of another dimension such that the resulting set of levels has fewer members in it than the set of dimensions resulting from a complete crossing of all unique dimension levels. The latter set of (fully-crossed) dimensions is characterized as dense.\nOn the R side of things, a special dataframe (actually, a tibble) referred to as a “dimension map” is used to characterize any set of dimensions, either intrinsic or user, sparse or dense.The first column in the model dimensions map is simply the row number associated with the unique combination of dimension levels the row reflects. It also provides the index into the population abundance vector for that combination of dimensions (and thus allows the extraction of the associated dimension levels given the index value). The remaining columns correspond to individual dimensions; for each column, the value for each row is the level (as a factor) of the associated dimension. Rows are ordered by the combination of factor levels across the dimensions, with levels changing the fastest in the right-most column.\nA dimensions map also has four non-standard attributes: dmtyp, dmnms, dmlvs, and dmlns:\n\ndmtyp identifies the type of dimensions (intrinsic or user, sparse or dense)\ndmnms is a character vector with the dimension names.\ndmlvs is a named list of character vectors comprising the unique levels for each dimension.\ndmlns is a named integer vector with the length (number of unique levels) of each dimension.\n\nGiven a sparse dimensions map, the corresponding dense map can be obtained by a full crossing of the levels in the sparse map’s dmlvs attribute.\nMost model quantities are represented as vectors, and thus have associated dimensions maps in order to be able to identify the dimension levels associated with each index value.\n\n\nSparse dimensions are defined using the R function createSparseDimsMap. As an example (Table 2), the following creates a set of dimensions encompassing year (y), season(s), sex (x), and size (z), with different size classes for males and females. Note that the “dimension name(s)” must be added as an attribute dmnms to the vector or list defining the levels.\n\n#&gt; Create the individual dimensions as vectors or lists (for nested dimensions)\n#&gt; --assign the attribute \"dmnms\", the dimension name(s) (plural if nested)\n#&gt; ----model years\nvYs = 2001:2005;                  attr(vYs,\"dmnms\")&lt;-\"y\";\n#&gt; ----model seasons\nvSs = c(\"fall\",\"spring\");         attr(vSs,\"dmnms\")&lt;-\"s\";\n#&gt; ----model sexes\nvXs = c(\"MALE\",\"FEMALE\");         attr(vXs,\"dmnms\")&lt;-\"x\";\n#&gt; ----model sizes, nested with sexes\nvZs = list(  MALE=seq(40,60,5),\n           FEMALE=seq(25,50,5));  attr(vZs,\"dmnms\")&lt;-c(\"x\",\"z\");\n#&gt;--create the dimensions \"map\"\ndmsSparse = createSparseDimsMap(y=vYs,s=vSs,x=vXs,z=vZs);\ndmsSparse |&gt; kableExtra::kbl(booktabs=TRUE,longtable=TRUE);\n\n\n\nTable 2: Example sparse dimensions map.\n\n\n\n\n\n\nsparse_idx\ny\ns\nx\nz\n\n\n\n\n1\n2001\nfall\nFEMALE\n25\n\n\n2\n2001\nfall\nFEMALE\n30\n\n\n3\n2001\nfall\nFEMALE\n35\n\n\n4\n2001\nfall\nFEMALE\n40\n\n\n5\n2001\nfall\nFEMALE\n45\n\n\n6\n2001\nfall\nFEMALE\n50\n\n\n7\n2001\nfall\nMALE\n40\n\n\n8\n2001\nfall\nMALE\n45\n\n\n9\n2001\nfall\nMALE\n50\n\n\n10\n2001\nfall\nMALE\n55\n\n\n11\n2001\nfall\nMALE\n60\n\n\n12\n2001\nspring\nFEMALE\n25\n\n\n13\n2001\nspring\nFEMALE\n30\n\n\n14\n2001\nspring\nFEMALE\n35\n\n\n15\n2001\nspring\nFEMALE\n40\n\n\n16\n2001\nspring\nFEMALE\n45\n\n\n17\n2001\nspring\nFEMALE\n50\n\n\n18\n2001\nspring\nMALE\n40\n\n\n19\n2001\nspring\nMALE\n45\n\n\n20\n2001\nspring\nMALE\n50\n\n\n21\n2001\nspring\nMALE\n55\n\n\n22\n2001\nspring\nMALE\n60\n\n\n23\n2002\nfall\nFEMALE\n25\n\n\n24\n2002\nfall\nFEMALE\n30\n\n\n25\n2002\nfall\nFEMALE\n35\n\n\n26\n2002\nfall\nFEMALE\n40\n\n\n27\n2002\nfall\nFEMALE\n45\n\n\n28\n2002\nfall\nFEMALE\n50\n\n\n29\n2002\nfall\nMALE\n40\n\n\n30\n2002\nfall\nMALE\n45\n\n\n31\n2002\nfall\nMALE\n50\n\n\n32\n2002\nfall\nMALE\n55\n\n\n33\n2002\nfall\nMALE\n60\n\n\n34\n2002\nspring\nFEMALE\n25\n\n\n35\n2002\nspring\nFEMALE\n30\n\n\n36\n2002\nspring\nFEMALE\n35\n\n\n37\n2002\nspring\nFEMALE\n40\n\n\n38\n2002\nspring\nFEMALE\n45\n\n\n39\n2002\nspring\nFEMALE\n50\n\n\n40\n2002\nspring\nMALE\n40\n\n\n41\n2002\nspring\nMALE\n45\n\n\n42\n2002\nspring\nMALE\n50\n\n\n43\n2002\nspring\nMALE\n55\n\n\n44\n2002\nspring\nMALE\n60\n\n\n45\n2003\nfall\nFEMALE\n25\n\n\n46\n2003\nfall\nFEMALE\n30\n\n\n47\n2003\nfall\nFEMALE\n35\n\n\n48\n2003\nfall\nFEMALE\n40\n\n\n49\n2003\nfall\nFEMALE\n45\n\n\n50\n2003\nfall\nFEMALE\n50\n\n\n51\n2003\nfall\nMALE\n40\n\n\n52\n2003\nfall\nMALE\n45\n\n\n53\n2003\nfall\nMALE\n50\n\n\n54\n2003\nfall\nMALE\n55\n\n\n55\n2003\nfall\nMALE\n60\n\n\n56\n2003\nspring\nFEMALE\n25\n\n\n57\n2003\nspring\nFEMALE\n30\n\n\n58\n2003\nspring\nFEMALE\n35\n\n\n59\n2003\nspring\nFEMALE\n40\n\n\n60\n2003\nspring\nFEMALE\n45\n\n\n61\n2003\nspring\nFEMALE\n50\n\n\n62\n2003\nspring\nMALE\n40\n\n\n63\n2003\nspring\nMALE\n45\n\n\n64\n2003\nspring\nMALE\n50\n\n\n65\n2003\nspring\nMALE\n55\n\n\n66\n2003\nspring\nMALE\n60\n\n\n67\n2004\nfall\nFEMALE\n25\n\n\n68\n2004\nfall\nFEMALE\n30\n\n\n69\n2004\nfall\nFEMALE\n35\n\n\n70\n2004\nfall\nFEMALE\n40\n\n\n71\n2004\nfall\nFEMALE\n45\n\n\n72\n2004\nfall\nFEMALE\n50\n\n\n73\n2004\nfall\nMALE\n40\n\n\n74\n2004\nfall\nMALE\n45\n\n\n75\n2004\nfall\nMALE\n50\n\n\n76\n2004\nfall\nMALE\n55\n\n\n77\n2004\nfall\nMALE\n60\n\n\n78\n2004\nspring\nFEMALE\n25\n\n\n79\n2004\nspring\nFEMALE\n30\n\n\n80\n2004\nspring\nFEMALE\n35\n\n\n81\n2004\nspring\nFEMALE\n40\n\n\n82\n2004\nspring\nFEMALE\n45\n\n\n83\n2004\nspring\nFEMALE\n50\n\n\n84\n2004\nspring\nMALE\n40\n\n\n85\n2004\nspring\nMALE\n45\n\n\n86\n2004\nspring\nMALE\n50\n\n\n87\n2004\nspring\nMALE\n55\n\n\n88\n2004\nspring\nMALE\n60\n\n\n89\n2005\nfall\nFEMALE\n25\n\n\n90\n2005\nfall\nFEMALE\n30\n\n\n91\n2005\nfall\nFEMALE\n35\n\n\n92\n2005\nfall\nFEMALE\n40\n\n\n93\n2005\nfall\nFEMALE\n45\n\n\n94\n2005\nfall\nFEMALE\n50\n\n\n95\n2005\nfall\nMALE\n40\n\n\n96\n2005\nfall\nMALE\n45\n\n\n97\n2005\nfall\nMALE\n50\n\n\n98\n2005\nfall\nMALE\n55\n\n\n99\n2005\nfall\nMALE\n60\n\n\n100\n2005\nspring\nFEMALE\n25\n\n\n101\n2005\nspring\nFEMALE\n30\n\n\n102\n2005\nspring\nFEMALE\n35\n\n\n103\n2005\nspring\nFEMALE\n40\n\n\n104\n2005\nspring\nFEMALE\n45\n\n\n105\n2005\nspring\nFEMALE\n50\n\n\n106\n2005\nspring\nMALE\n40\n\n\n107\n2005\nspring\nMALE\n45\n\n\n108\n2005\nspring\nMALE\n50\n\n\n109\n2005\nspring\nMALE\n55\n\n\n110\n2005\nspring\nMALE\n60\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a sparse dimensions map dmsSparse, the associated dense map can be created using the R function createDenseDimsMap:\n\n\n\n\nTable 3: Example dense dimensions map (first 20 rows) corrseponding to the previous sparse dimensions map.\n\n\n\n\n\n\ndense_idx\ny\ns\nx\nz\n\n\n\n\n1\n2001\nfall\nFEMALE\n25\n\n\n2\n2001\nfall\nFEMALE\n30\n\n\n3\n2001\nfall\nFEMALE\n35\n\n\n4\n2001\nfall\nFEMALE\n40\n\n\n5\n2001\nfall\nFEMALE\n45\n\n\n6\n2001\nfall\nFEMALE\n50\n\n\n7\n2001\nfall\nFEMALE\n55\n\n\n8\n2001\nfall\nFEMALE\n60\n\n\n9\n2001\nfall\nMALE\n25\n\n\n10\n2001\nfall\nMALE\n30\n\n\n11\n2001\nfall\nMALE\n35\n\n\n12\n2001\nfall\nMALE\n40\n\n\n13\n2001\nfall\nMALE\n45\n\n\n14\n2001\nfall\nMALE\n50\n\n\n15\n2001\nfall\nMALE\n55\n\n\n16\n2001\nfall\nMALE\n60\n\n\n17\n2001\nspring\nFEMALE\n25\n\n\n18\n2001\nspring\nFEMALE\n30\n\n\n19\n2001\nspring\nFEMALE\n35\n\n\n20\n2001\nspring\nFEMALE\n40\n\n\n\n\n\n\n\n\n\n\nIn the above example, the size (number of rows) of the resulting dense dimensions map (160) is larger than that of the nested dimensions map (110) because of the different size bins defined for males and females.\n\n\n\nData fit in GMACS typically represent quantities aggregated over some combination of population categories, so it is necessary to determine the mapping from model indices to data indices. The function createAggregatorMap provides the required mapping of 1-d indices from one dimensions map to another, as illustrated in the following example (Table 4) using the dimensions map dmsDense from the previous example:\n\n#&gt; Example of how to create an aggregator map using \"dmsDense\" from above\n#&gt; to aggregate by year (y) and sex (x) over season (s) and size (z). \n#&gt;    Create dimensions map with only y and x\n  aggDims = keepDims(dmsDense,keep=c(\"y\",\"x\"));#--keeps only y and x dimensions, recreates 1-d vector index\n#&gt;    Create aggregator map from y,x,s,z to y,x\n  aggMap  = createAggregatorMap(dmsDense,aggDims,keepOrigDims=TRUE);\n\nidx_to is the vector index for aggMap, idx_from is the vector index for dmsDense.\n\n\n\n\nTable 4: Example aggregator map (from indices idx_frm to indices idx_to).\n\n\n\n\n\n\nidx_to\nidx_from\ny\ns\nx\nz\n\n\n\n\n1\n1\n2001\nfall\nFEMALE\n25\n\n\n1\n2\n2001\nfall\nFEMALE\n30\n\n\n1\n3\n2001\nfall\nFEMALE\n35\n\n\n1\n4\n2001\nfall\nFEMALE\n40\n\n\n1\n5\n2001\nfall\nFEMALE\n45\n\n\n1\n6\n2001\nfall\nFEMALE\n50\n\n\n1\n7\n2001\nfall\nFEMALE\n55\n\n\n1\n8\n2001\nfall\nFEMALE\n60\n\n\n2\n9\n2001\nfall\nMALE\n25\n\n\n2\n10\n2001\nfall\nMALE\n30\n\n\n2\n11\n2001\nfall\nMALE\n35\n\n\n2\n12\n2001\nfall\nMALE\n40\n\n\n2\n13\n2001\nfall\nMALE\n45\n\n\n2\n14\n2001\nfall\nMALE\n50\n\n\n2\n15\n2001\nfall\nMALE\n55\n\n\n2\n16\n2001\nfall\nMALE\n60\n\n\n1\n17\n2001\nspring\nFEMALE\n25\n\n\n1\n18\n2001\nspring\nFEMALE\n30\n\n\n1\n19\n2001\nspring\nFEMALE\n35\n\n\n1\n20\n2001\nspring\nFEMALE\n40\n\n\n1\n21\n2001\nspring\nFEMALE\n45\n\n\n1\n22\n2001\nspring\nFEMALE\n50\n\n\n1\n23\n2001\nspring\nFEMALE\n55\n\n\n1\n24\n2001\nspring\nFEMALE\n60\n\n\n2\n25\n2001\nspring\nMALE\n25\n\n\n2\n26\n2001\nspring\nMALE\n30\n\n\n2\n27\n2001\nspring\nMALE\n35\n\n\n2\n28\n2001\nspring\nMALE\n40\n\n\n2\n29\n2001\nspring\nMALE\n45\n\n\n2\n30\n2001\nspring\nMALE\n50\n\n\n2\n31\n2001\nspring\nMALE\n55\n\n\n2\n32\n2001\nspring\nMALE\n60\n\n\n3\n33\n2002\nfall\nFEMALE\n25\n\n\n3\n34\n2002\nfall\nFEMALE\n30\n\n\n3\n35\n2002\nfall\nFEMALE\n35\n\n\n3\n36\n2002\nfall\nFEMALE\n40\n\n\n3\n37\n2002\nfall\nFEMALE\n45\n\n\n3\n38\n2002\nfall\nFEMALE\n50\n\n\n3\n39\n2002\nfall\nFEMALE\n55\n\n\n3\n40\n2002\nfall\nFEMALE\n60\n\n\n4\n41\n2002\nfall\nMALE\n25\n\n\n4\n42\n2002\nfall\nMALE\n30\n\n\n4\n43\n2002\nfall\nMALE\n35\n\n\n4\n44\n2002\nfall\nMALE\n40\n\n\n4\n45\n2002\nfall\nMALE\n45\n\n\n4\n46\n2002\nfall\nMALE\n50\n\n\n4\n47\n2002\nfall\nMALE\n55\n\n\n4\n48\n2002\nfall\nMALE\n60\n\n\n3\n49\n2002\nspring\nFEMALE\n25\n\n\n3\n50\n2002\nspring\nFEMALE\n30\n\n\n3\n51\n2002\nspring\nFEMALE\n35\n\n\n3\n52\n2002\nspring\nFEMALE\n40\n\n\n3\n53\n2002\nspring\nFEMALE\n45\n\n\n3\n54\n2002\nspring\nFEMALE\n50\n\n\n3\n55\n2002\nspring\nFEMALE\n55\n\n\n3\n56\n2002\nspring\nFEMALE\n60\n\n\n4\n57\n2002\nspring\nMALE\n25\n\n\n4\n58\n2002\nspring\nMALE\n30\n\n\n4\n59\n2002\nspring\nMALE\n35\n\n\n4\n60\n2002\nspring\nMALE\n40\n\n\n4\n61\n2002\nspring\nMALE\n45\n\n\n4\n62\n2002\nspring\nMALE\n50\n\n\n4\n63\n2002\nspring\nMALE\n55\n\n\n4\n64\n2002\nspring\nMALE\n60\n\n\n5\n65\n2003\nfall\nFEMALE\n25\n\n\n5\n66\n2003\nfall\nFEMALE\n30\n\n\n5\n67\n2003\nfall\nFEMALE\n35\n\n\n5\n68\n2003\nfall\nFEMALE\n40\n\n\n5\n69\n2003\nfall\nFEMALE\n45\n\n\n5\n70\n2003\nfall\nFEMALE\n50\n\n\n5\n71\n2003\nfall\nFEMALE\n55\n\n\n5\n72\n2003\nfall\nFEMALE\n60\n\n\n6\n73\n2003\nfall\nMALE\n25\n\n\n6\n74\n2003\nfall\nMALE\n30\n\n\n6\n75\n2003\nfall\nMALE\n35\n\n\n6\n76\n2003\nfall\nMALE\n40\n\n\n6\n77\n2003\nfall\nMALE\n45\n\n\n6\n78\n2003\nfall\nMALE\n50\n\n\n6\n79\n2003\nfall\nMALE\n55\n\n\n6\n80\n2003\nfall\nMALE\n60\n\n\n5\n81\n2003\nspring\nFEMALE\n25\n\n\n5\n82\n2003\nspring\nFEMALE\n30\n\n\n5\n83\n2003\nspring\nFEMALE\n35\n\n\n5\n84\n2003\nspring\nFEMALE\n40\n\n\n5\n85\n2003\nspring\nFEMALE\n45\n\n\n5\n86\n2003\nspring\nFEMALE\n50\n\n\n5\n87\n2003\nspring\nFEMALE\n55\n\n\n5\n88\n2003\nspring\nFEMALE\n60\n\n\n6\n89\n2003\nspring\nMALE\n25\n\n\n6\n90\n2003\nspring\nMALE\n30\n\n\n6\n91\n2003\nspring\nMALE\n35\n\n\n6\n92\n2003\nspring\nMALE\n40\n\n\n6\n93\n2003\nspring\nMALE\n45\n\n\n6\n94\n2003\nspring\nMALE\n50\n\n\n6\n95\n2003\nspring\nMALE\n55\n\n\n6\n96\n2003\nspring\nMALE\n60\n\n\n7\n97\n2004\nfall\nFEMALE\n25\n\n\n7\n98\n2004\nfall\nFEMALE\n30\n\n\n7\n99\n2004\nfall\nFEMALE\n35\n\n\n7\n100\n2004\nfall\nFEMALE\n40\n\n\n7\n101\n2004\nfall\nFEMALE\n45\n\n\n7\n102\n2004\nfall\nFEMALE\n50\n\n\n7\n103\n2004\nfall\nFEMALE\n55\n\n\n7\n104\n2004\nfall\nFEMALE\n60\n\n\n8\n105\n2004\nfall\nMALE\n25\n\n\n8\n106\n2004\nfall\nMALE\n30\n\n\n8\n107\n2004\nfall\nMALE\n35\n\n\n8\n108\n2004\nfall\nMALE\n40\n\n\n8\n109\n2004\nfall\nMALE\n45\n\n\n8\n110\n2004\nfall\nMALE\n50\n\n\n8\n111\n2004\nfall\nMALE\n55\n\n\n8\n112\n2004\nfall\nMALE\n60\n\n\n7\n113\n2004\nspring\nFEMALE\n25\n\n\n7\n114\n2004\nspring\nFEMALE\n30\n\n\n7\n115\n2004\nspring\nFEMALE\n35\n\n\n7\n116\n2004\nspring\nFEMALE\n40\n\n\n7\n117\n2004\nspring\nFEMALE\n45\n\n\n7\n118\n2004\nspring\nFEMALE\n50\n\n\n7\n119\n2004\nspring\nFEMALE\n55\n\n\n7\n120\n2004\nspring\nFEMALE\n60\n\n\n8\n121\n2004\nspring\nMALE\n25\n\n\n8\n122\n2004\nspring\nMALE\n30\n\n\n8\n123\n2004\nspring\nMALE\n35\n\n\n8\n124\n2004\nspring\nMALE\n40\n\n\n8\n125\n2004\nspring\nMALE\n45\n\n\n8\n126\n2004\nspring\nMALE\n50\n\n\n8\n127\n2004\nspring\nMALE\n55\n\n\n8\n128\n2004\nspring\nMALE\n60\n\n\n9\n129\n2005\nfall\nFEMALE\n25\n\n\n9\n130\n2005\nfall\nFEMALE\n30\n\n\n9\n131\n2005\nfall\nFEMALE\n35\n\n\n9\n132\n2005\nfall\nFEMALE\n40\n\n\n9\n133\n2005\nfall\nFEMALE\n45\n\n\n9\n134\n2005\nfall\nFEMALE\n50\n\n\n9\n135\n2005\nfall\nFEMALE\n55\n\n\n9\n136\n2005\nfall\nFEMALE\n60\n\n\n10\n137\n2005\nfall\nMALE\n25\n\n\n10\n138\n2005\nfall\nMALE\n30\n\n\n10\n139\n2005\nfall\nMALE\n35\n\n\n10\n140\n2005\nfall\nMALE\n40\n\n\n10\n141\n2005\nfall\nMALE\n45\n\n\n10\n142\n2005\nfall\nMALE\n50\n\n\n10\n143\n2005\nfall\nMALE\n55\n\n\n10\n144\n2005\nfall\nMALE\n60\n\n\n9\n145\n2005\nspring\nFEMALE\n25\n\n\n9\n146\n2005\nspring\nFEMALE\n30\n\n\n9\n147\n2005\nspring\nFEMALE\n35\n\n\n9\n148\n2005\nspring\nFEMALE\n40\n\n\n9\n149\n2005\nspring\nFEMALE\n45\n\n\n9\n150\n2005\nspring\nFEMALE\n50\n\n\n9\n151\n2005\nspring\nFEMALE\n55\n\n\n9\n152\n2005\nspring\nFEMALE\n60\n\n\n10\n153\n2005\nspring\nMALE\n25\n\n\n10\n154\n2005\nspring\nMALE\n30\n\n\n10\n155\n2005\nspring\nMALE\n35\n\n\n10\n156\n2005\nspring\nMALE\n40\n\n\n10\n157\n2005\nspring\nMALE\n45\n\n\n10\n158\n2005\nspring\nMALE\n50\n\n\n10\n159\n2005\nspring\nMALE\n55\n\n\n10\n160\n2005\nspring\nMALE\n60",
    "crumbs": [
      "Model Dimensions"
    ]
  },
  {
    "objectID": "website/01_Intro.html",
    "href": "website/01_Intro.html",
    "title": "Introduction",
    "section": "",
    "text": "The purpose of rtmbGMACS is to provide a population modeling framework for commercially-fished crustacean stocks. Stock assessment models developed using rtmbGMACS can be fit to fishery, survey, and biological data to estimate various population processes (e.g., recruitment, growth, and mortality) and population size in order to determine sustainable fishing limits and targets.\nHere, the modeling framework is referred to as “gmacs” while the R package is referred to “rtmbGMACS”. The R package provides functions to set up data inputs to a gmacs model, with associated likelihood functions, select functional forms for various population processes, define estimable parameters and associated priors or penalties, run the model, create plots and tables from a fitted model, and compare multiple models.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "website/01_Intro.html#software-architecture",
    "href": "website/01_Intro.html#software-architecture",
    "title": "Introduction",
    "section": "Software architecture",
    "text": "Software architecture\nThe rtmbGMACS R package allows the user to construct rather general size-structured population dynamics models, as well as “observation” models for predicting data values and associated likelihood functions to characterize model fit, define various characteristics (e.g., value, hyper parameters and prior probability function) of the resulting set of model parameters, calculate the population state and predict observations through time based on the parameter values, and calculate individual and total likelihood components.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "website/02_PopDyMod.html",
    "href": "website/02_PopDyMod.html",
    "title": "Population Dynamics",
    "section": "",
    "text": "The GMACS population model integrates the abundance of individuals in various discrete population categories over time based on assumptions regarding population processes consisting of recruitment, growth, maturation, natural mortality, and fishing mortality. Typical population categories might be sex and size, but it is possible to define a model with up to six categories, including region, sex, maturity state, age, post-molt age, and size. Although crustaceans cannot typically be aged, age (and post-molt age) can be included as a population category if population processes such as maturation or natural mortality are thought to have a strong age dependence.\nPopulation abundance in GMACS is represented as vector, \\(\\mathbf{n}\\), with elements \\(n_c\\), where \\(c\\) is a 1-dimensional index across the combination of population categories. The temporal nature of the population is represented by \\(\\mathbf{n}(t)\\), a vector representing the abundance in each category at time \\(t\\) (i.e., a vector with elements \\(n_c(t)\\)).\nHeuristically, the population is integrated through time based on the following differential equation:\n\\[ \\frac{d\\mathbf{n}}{dt} = \\left[ \\mathbf{T}(t)-(\\mathbf{M}(t)+\\mathbf{F}(t)) \\right]*\\mathbf{n}(t) + \\mathbf{R}(t)  \\tag{1}\\]\nwhere \\(\\mathbf{T}(t)\\) is a \\(c\\) x \\(c\\) matrix representing transition rates between population categories (e.g., growth or movement) at time \\(t\\), \\(\\mathbf{M}(t)\\) is a similarly-sized diagonal matrix representing natural mortality at time \\(t\\), \\(\\mathbf{F}(t)\\) is a similarly-sized diagonal matrix representing fishing mortality at time \\(t\\), and \\(\\mathbf{R}(t)\\) is a \\(c\\) x 1 vector representing the rate of recruitment at time \\(t\\) of new crab into each population category.\nAssuming the rates in eq. {-eq-1} are constant across a timestep \\(\\delta t\\), eq. 1 can be integrated to obtain\n\\[\\mathbf{n}_{t+\\delta t} = e^{\\mathbf{A}_t \\delta t_s}*\\mathbf{n}_t + \\mathbf{R}_t \\cdot \\delta t \\tag{2}\\]\nwhere \\(\\mathbf{A}_t=\\left[ \\mathbf{T}_t-(\\mathbf{M}_t+\\mathbf{F}_t) \\right]\\). To meet the assumption of constant rates across the integration time step \\(\\delta t\\), the In practice, when \\(\\mathbf{T}_t\\) represents growth processes, these are regarded as discrete-time processes with a season length of zero, so that\n\\[ \\mathbf{n}_{t+1} = \\mathbf{T}_t \\cdot \\mathbf{n}_t  \\tag{3}\\]\nfor seasons in which growth occurs and\n\\[ \\mathbf{n}_{t+1} = e^{-\\left[ \\mathbf{M}_t+\\mathbf{F}_t \\right]\\cdot \\delta t} \\cdot \\mathbf{n}_t \\tag{4}\\]\nfor seasons with non-zero lengths in which mortality occurs.\nRecruitment, the addition of new individuals to the model population categories, is also considered a discrete-time process associated with a season of zero length, so\n\\[ \\mathbf{n_{t+1}} = \\mathbf{r}_t+\\mathbf{n}_t  \\tag{5}\\]\nwhen recruitment occurs, where \\(\\mathbf{r}_t\\) is a vector of length \\(c\\).\nAt an annual time step \\(y\\), the integration across \\(n_s\\) seasons \\(s\\) can be represented as\n\\[ \\mathbf{n}_{y+1,s=1} = \\{ \\prod_{s \\in {s_a}} \\mathbf{\\Lambda}_{y,s} \\} \\cdot \\{ \\mathbf{r}_y + \\cdot \\{ \\prod_{s \\in {s_b}} \\mathbf{\\Lambda}_{y,s} \\} \\cdot \\mathbf{n}_{y,s=1} \\} \\tag{6}\\]\nwhere \\(s_a\\) are seasons after recruitment occurs and \\(s_b\\) are seasons before recruitment occurs. This can be represented more compactly as\n\\[ \\mathbf{n_{y+1}} = \\mathfrak{\\mathbf{A}}_y \\cdot \\{\\mathbf{r}_y + \\mathfrak{\\mathbf{B}}_y \\cdot \\mathbf{n}_y \\} \\tag{7}\\]\nwhere the season subscript has been dropped (\\(s=1\\)) from the \\(\\mathbf{n}\\)’s.\nAssuming that the terms in Equation 7 can be replaced by equilibrium equivalents (e.g., appropriate longterm averages), the equilibrium population size structure \\(&lt;\\mathbf{n}&gt;\\) is given by\n\\[ &lt;\\mathbf{n}&gt; = [&lt;\\mathfrak{\\mathbf{A}}&gt;^{-1} - &lt;\\mathfrak{\\mathbf{B}}&gt;]^{-1} &lt;\\mathbf{r}&gt; \\tag{8}\\]\nwhere \\(&lt;  &gt;\\) is the expected value operator.",
    "crumbs": [
      "Population Dynamics"
    ]
  },
  {
    "objectID": "website/02_PopDyMod.html#population-model-description",
    "href": "website/02_PopDyMod.html#population-model-description",
    "title": "Population Dynamics",
    "section": "",
    "text": "The GMACS population model integrates the abundance of individuals in various discrete population categories over time based on assumptions regarding population processes consisting of recruitment, growth, maturation, natural mortality, and fishing mortality. Typical population categories might be sex and size, but it is possible to define a model with up to six categories, including region, sex, maturity state, age, post-molt age, and size. Although crustaceans cannot typically be aged, age (and post-molt age) can be included as a population category if population processes such as maturation or natural mortality are thought to have a strong age dependence.\nPopulation abundance in GMACS is represented as vector, \\(\\mathbf{n}\\), with elements \\(n_c\\), where \\(c\\) is a 1-dimensional index across the combination of population categories. The temporal nature of the population is represented by \\(\\mathbf{n}(t)\\), a vector representing the abundance in each category at time \\(t\\) (i.e., a vector with elements \\(n_c(t)\\)).\nHeuristically, the population is integrated through time based on the following differential equation:\n\\[ \\frac{d\\mathbf{n}}{dt} = \\left[ \\mathbf{T}(t)-(\\mathbf{M}(t)+\\mathbf{F}(t)) \\right]*\\mathbf{n}(t) + \\mathbf{R}(t)  \\tag{1}\\]\nwhere \\(\\mathbf{T}(t)\\) is a \\(c\\) x \\(c\\) matrix representing transition rates between population categories (e.g., growth or movement) at time \\(t\\), \\(\\mathbf{M}(t)\\) is a similarly-sized diagonal matrix representing natural mortality at time \\(t\\), \\(\\mathbf{F}(t)\\) is a similarly-sized diagonal matrix representing fishing mortality at time \\(t\\), and \\(\\mathbf{R}(t)\\) is a \\(c\\) x 1 vector representing the rate of recruitment at time \\(t\\) of new crab into each population category.\nAssuming the rates in eq. {-eq-1} are constant across a timestep \\(\\delta t\\), eq. 1 can be integrated to obtain\n\\[\\mathbf{n}_{t+\\delta t} = e^{\\mathbf{A}_t \\delta t_s}*\\mathbf{n}_t + \\mathbf{R}_t \\cdot \\delta t \\tag{2}\\]\nwhere \\(\\mathbf{A}_t=\\left[ \\mathbf{T}_t-(\\mathbf{M}_t+\\mathbf{F}_t) \\right]\\). To meet the assumption of constant rates across the integration time step \\(\\delta t\\), the In practice, when \\(\\mathbf{T}_t\\) represents growth processes, these are regarded as discrete-time processes with a season length of zero, so that\n\\[ \\mathbf{n}_{t+1} = \\mathbf{T}_t \\cdot \\mathbf{n}_t  \\tag{3}\\]\nfor seasons in which growth occurs and\n\\[ \\mathbf{n}_{t+1} = e^{-\\left[ \\mathbf{M}_t+\\mathbf{F}_t \\right]\\cdot \\delta t} \\cdot \\mathbf{n}_t \\tag{4}\\]\nfor seasons with non-zero lengths in which mortality occurs.\nRecruitment, the addition of new individuals to the model population categories, is also considered a discrete-time process associated with a season of zero length, so\n\\[ \\mathbf{n_{t+1}} = \\mathbf{r}_t+\\mathbf{n}_t  \\tag{5}\\]\nwhen recruitment occurs, where \\(\\mathbf{r}_t\\) is a vector of length \\(c\\).\nAt an annual time step \\(y\\), the integration across \\(n_s\\) seasons \\(s\\) can be represented as\n\\[ \\mathbf{n}_{y+1,s=1} = \\{ \\prod_{s \\in {s_a}} \\mathbf{\\Lambda}_{y,s} \\} \\cdot \\{ \\mathbf{r}_y + \\cdot \\{ \\prod_{s \\in {s_b}} \\mathbf{\\Lambda}_{y,s} \\} \\cdot \\mathbf{n}_{y,s=1} \\} \\tag{6}\\]\nwhere \\(s_a\\) are seasons after recruitment occurs and \\(s_b\\) are seasons before recruitment occurs. This can be represented more compactly as\n\\[ \\mathbf{n_{y+1}} = \\mathfrak{\\mathbf{A}}_y \\cdot \\{\\mathbf{r}_y + \\mathfrak{\\mathbf{B}}_y \\cdot \\mathbf{n}_y \\} \\tag{7}\\]\nwhere the season subscript has been dropped (\\(s=1\\)) from the \\(\\mathbf{n}\\)’s.\nAssuming that the terms in Equation 7 can be replaced by equilibrium equivalents (e.g., appropriate longterm averages), the equilibrium population size structure \\(&lt;\\mathbf{n}&gt;\\) is given by\n\\[ &lt;\\mathbf{n}&gt; = [&lt;\\mathfrak{\\mathbf{A}}&gt;^{-1} - &lt;\\mathfrak{\\mathbf{B}}&gt;]^{-1} &lt;\\mathbf{r}&gt; \\tag{8}\\]\nwhere \\(&lt;  &gt;\\) is the expected value operator.",
    "crumbs": [
      "Population Dynamics"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html",
    "href": "website/04_FunctionsAndParametersSpecification.html",
    "title": "Model Functions and Parameters",
    "section": "",
    "text": "rtmbGMACS can encapsulate the following population- and observation-related processes in a model:\n\ninitial abundance\nallometry (weight-at-size)\nrecruitment\nnatural mortality\ngrowth\nmaturation\nsize-specific functions (e.g., selectivity and retention)\nfishing mortality\nsurvey catchability\nmovement (TBD?)\n\nEach of these processes can be included in the final model using selections among a number of possible functional forms, each with associated parameters defined using a hierarchical structure. In this hierarchical structure, “top-level” parameters can be fixed or estimated as fixed effects and time-variation can be added through annually-varying offsets (as fixed or random effects) which can, in turn, be linear functions of environmental covariates.",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#model-processes-functions-and-parameters",
    "href": "website/04_FunctionsAndParametersSpecification.html#model-processes-functions-and-parameters",
    "title": "Model Functions and Parameters",
    "section": "",
    "text": "rtmbGMACS can encapsulate the following population- and observation-related processes in a model:\n\ninitial abundance\nallometry (weight-at-size)\nrecruitment\nnatural mortality\ngrowth\nmaturation\nsize-specific functions (e.g., selectivity and retention)\nfishing mortality\nsurvey catchability\nmovement (TBD?)\n\nEach of these processes can be included in the final model using selections among a number of possible functional forms, each with associated parameters defined using a hierarchical structure. In this hierarchical structure, “top-level” parameters can be fixed or estimated as fixed effects and time-variation can be added through annually-varying offsets (as fixed or random effects) which can, in turn, be linear functions of environmental covariates.",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#ctl-file-syntax-under-development",
    "href": "website/04_FunctionsAndParametersSpecification.html#ctl-file-syntax-under-development",
    "title": "Model Functions and Parameters",
    "section": "CTL file syntax (UNDER DEVELOPMENT)",
    "text": "CTL file syntax (UNDER DEVELOPMENT)\nBoth functions and parameters for all processes are defined in the “CTL” file (the actual filename of which is arbitrary). The CTL file is a text file: comments follow a “#” symbol while function and parameter specifications are made using white space-delimited tables with a header line with column names and a final line specifying “END TABLE”. Sections defining individual processes are delimited by a line starting with the name of the process to be defined (e.g.  “RECRUITMENT”) and a line indicating the end of the process definition (e.g., “END RECRUITMENT”).\n\nFunction and parameter specification\nFunctions and parameters within a process definition section are defined using table structures that are read in as tibbles.\n\nFunctions\nFunction tables start a header line with a fcn_id column followed by other column names specific to the process being defined, ending with a label column. Rows following the header line specify the functions that combine to define the process for a specified time block and (possibly) combination of population classes. Table 1 provides an example table for the recruitment process.\n\n\n\nTable 1: Example table of function definitions for the recruitment process.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfcn_id\ntime_block\nsex\nsize_fcn\nmax size\nrec_type\nlabel\n\n\n\n\n1\n2001:2005\nall\ngamma\n50\nnoSR1\nbasic_rec\n\n\n2\n2006:2023\nmale\ngamma\n50\nnoSR1-RW\nmale_rec2006+\n\n\n3\n2006:2023\nfemale\ngamma\n45\nnoSR1-RW\nfemale_rec2006+\n\n\n\n\n\n\nIn the table, fcn_id provides a unique row reference to refer back to a function definition, time_block specifies the years to which the definition applies, sex specifies the sex to which it applies, etc. The columns fcn_id and label must be present in each function definition table, but otherwise the column names are specific to the process in question. Additionally, the columns may be in any order.\n\n\nParameters\nThe parameters associated with each function defined in the function definitions table are defined in a hierarchical set of tables either as\n\\[p_{t,c} = p_{t_{ref},c} + \\delta p_{t,c} + \\left[ \\sum_{e} \\alpha_{e} \\cdot v_{e,t} + \\beta_e \\right]  \\tag{1}\\]\nor\n\\[p_{t,c} = p_{t_{ref},c} + s \\cdot \\sum_{t'=t_{ref}+s}^t\\delta p_{t',c} + \\left[ \\sum_{e} \\alpha_{e} \\cdot v_{e,t} + \\beta_e \\right]  \\tag{2}\\]\nIn Equation 1, the \\(\\delta p_{t,c}\\) are annual offsets to \\(p_{t_{ref},c}\\) with \\(\\delta p_{t_{ref},c}=0\\) while \\(s\\) in Equation 2 is \\(sgn(t-t_{ref})\\) and the \\(\\delta p_{t,c}\\) are annual random walk innovations. The \\(\\delta p_{t,c}\\) can be either fixed or random effects. The effect of any environmental covariates is modeled as a sum over individual linear effects, the \\(\\alpha_{e}\\) and \\(\\alpha_{e}\\) are the (potentially) estimable fixed effects and \\(v_{e,t}\\) represents the value at time \\(t\\) of the e-th covariate.\n\nReference-level parameters\nThe reference-level parameters are defined in tables similar to Table 2, which is an example that defines the \\(\\alpha\\) and \\(\\beta\\) parameters for the recruitment-at-size gamma functions from Table 1.\n\n\n\nTable 2: Example table of reference-level parameters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfcn_id\nparam\npar_id\nref_time\nscale\nunits\nival\nlb\nub\nphz\npr_type\np1\np2\noffsets\ncovars\nlabel\n\n\n\n\n1\nalpha\n1\nNA\nln\nnone\n9.33\n2.7\n56\n5\nnone\n0\n0\nno\ne1,e2\nalpha1\n\n\n1\nbeta\n2\n2001\nln\nnone\n3.86\n1\n3.9\n5\nnone\n0\n0\nyes\nNA\nbeta1\n\n\n2\nalpha\n3\n2006\nln\nnone\n9.33\n2.7\n56\n5\nnone\n0\n0\nno\ne1,e2\nalpha2\n\n\n2\nalpha\n4\n2011\nln\nnone\n9.33\n2.7\n56\n5\nnone\n0\n0\nyes\nNA\nalpha3\n\n\n2\nbeta\n5\n2006\nln\nnone\n3.86\n1\n3.9\n5\nnone\n0\n0\nno\nNA\nbeta2\n\n\n3\nalpha\n-3\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n3\nbeta\n-2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\nIn Table 2:\n\nfcn_id identifies a row in the function definition table\nparam identifies the name of the relevant parameter being specified\npar_id associates a unique positive integer with the parameter, or a negative value indicating substitution with the parameter associated with the positive value\nref_time identifies the reference time for parameters with a hierarchical structure\nscale indicates the scale used to specify the initial value, bounds, and prior (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)\nunits indicates any units associated with the initial value, bounds, and prior\nival, lb, ub specify the initial value and lower and upper bounds\nphz identifies the estimation phase in which the parameter should be “turned on” (never estimated if &lt; 0)\npr_type specifies the prior probability function associated with the estimated parameter\np1,p2 specify parameter values for the prior\noffsets indicates whether annually-varying offset parameters (i.e., the \\(\\delta p_{t,c}\\)) should be associated with the reference parameter\ncovars specifies the covariates (if any) text string to associate with the reference parameter as a comma-delimited\nlabel specifies a specific label to use for the parameter\n\nThe columns may be in any order, but (unlike a function definition table) all columns should be present.\n\n\nParameter offsets\nIf parameter offsets are defined for any reference parameter, then a table defining these offsets needs to follow the table defining the reference parameters. The annually-varying parameter offsets (i.e., the \\(\\delta p_{t,c}\\)) are defined in tables similar to Table 3, which follows on from Table 2:\n\n\n\nTable 3: Example table of offset-level parameters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npar_id\noff_id\ntime_block\nparam\nscale\nunits\nphz\noff_type\nRE\nival\npr_type\np1\np2\nlabel\n\n\n\n\n2\n1\n2001:2005\nbeta\nar\nnone\n5\noffset\nno\n0\nnormal\n0\n1\ndvs_beta\n\n\n4\n2\n2011:2023\nalpha\nar\nnone\n5\nRW\nno\n0\nnormal\n0\n1\nrw_alpha\n\n\n\n\n\n\nIn Table 3:\n\npar_id identifies a row in the reference parameters definition table\noff_id associates a unique positive integer with the parameter, or a negative value indicating substitution with the parameter associated with the positive value\ntime_block identifies the time block across which the offset parameters are defined\nparam indicates the name of the associated reference parameter (provides error checking; it should be redundant with par_id)\nscale indicates the scale used to specify the initial value, bounds, and prior (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)\nunits indicates any units associated with the initial value, bounds, and prior\nphz identifies the estimation phase in which the parameter should be “turned on” (never estimated if &lt; 0)\noff_type identifies the offset type (“offset” or “RW”, implying Equation 1 or Equation 2)\nRE is a flag to regard the offsets as random effects\nival, lb, ub specify the initial value and lower and upper bounds (the latter two are not included in the example)\npr_type specifies the prior probability function associated with the estimated offsets\np1,p2 specify parameter values for the prior\nlabel specifies a specific label to use for the parameter\n\nThe columns may be in any order, but (unlike a function definition table) all columns should be present.\n\n\nCovariates\nIf covariates are defined for any reference parameter, then a table defining the associated parameters needs to follow the table(s) defining the reference parameters and any offset parameters. The annually-varying covariate effects (i.e., the \\(\\alpha_e \\cdot v_{e,t} + \\beta_e\\)) are defined for the reference parameters in tables similar to Table 4, which follows on from Table 2:\n\n\n\nTable 4: Example table of covariate-level parameters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npar_id\ncov_id\ncovar\ntime_block\nparam\nscale\nunits\nphz\nRE\nival\npr_type\np1\np2\nlabel\n\n\n\n\n1\n1\ne1\n2001:2005\ncov_alpha\nar\nnone\n5\nno\n0\nnormal\n0\n1\ncov_alpha_e1\n\n\n1\n2\ne1\n2001:2005\ncov_beta\nar\nnone\n5\nno\n0\nnormal\n0\n1\ncov_beta_e1\n\n\n1\n3\ne2\n2001:2005\ncov_alpha\nar\nnone\n5\nno\n0\nnormal\n0\n1\ncov_alpha_e2\n\n\n1\n4\ne2\n2001:2005\ncov_beta\nar\nnone\n5\nno\n0\nnormal\n0\n1\ncov_beta_e2\n\n\n\n\n\n\nIn Table 4:\n\npar_id identifies a row in the reference parameters definition table\ncov_id associates a unique positive integer with the covariate parameter, or a negative value indicating substitution with the parameter associated with the positive value\ncovar indicates the name of the associated covariate\ntime_block identifies the time block across which the covariates are applied\nparam indicates the name of the covariate-level parameter\nscale indicates the scale used to specify the initial value, bounds, and prior (the values will be subsequently transformed as necessary to the scale used for the parameter in the model)\nunits indicates any units associated with the initial value, bounds, and prior\nphz identifies the estimation phase in which the parameter should be “turned on” (never estimated if &lt; 0)\nRE is a flag (yes/no) to regard the offsets as random effects\nival, lb, ub specify the initial value and lower and upper bounds (the latter two are not included in the example)\npr_type specifies the prior probability function associated with the estimated offsets\np1,p2 specify parameter values for the prior\nlabel specifies a specific label to use for the parameter",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-InitAbd",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-InitAbd",
    "title": "Model Functions and Parameters",
    "section": "Initial abundance",
    "text": "Initial abundance",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-Allom",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-Allom",
    "title": "Model Functions and Parameters",
    "section": "Allometry",
    "text": "Allometry",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-Rec",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-Rec",
    "title": "Model Functions and Parameters",
    "section": "Recruitment",
    "text": "Recruitment",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-NatM",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-NatM",
    "title": "Model Functions and Parameters",
    "section": "Natural mortality",
    "text": "Natural mortality",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-Grw",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-Grw",
    "title": "Model Functions and Parameters",
    "section": "Growth",
    "text": "Growth",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-Mat",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-Mat",
    "title": "Model Functions and Parameters",
    "section": "Maturity",
    "text": "Maturity",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-Sel",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-Sel",
    "title": "Model Functions and Parameters",
    "section": "Selectivity",
    "text": "Selectivity\nA number of 1-dimensional functions, listed in the subsections below, can be used to describe size-specific fishery or survey catchability, as well as fishery retention, by fleet and population categories. All have the the signature\n\\[ s = fcn(z,params,consts,debug=FALSE) \\]\nwhere s is an advector with the same number of elements as the vector z, representing the selectivity at the values of the vector z, fcn is the function, params is an advector representing the function parameters, and consts is a vector representing any required constants.\n\nLogistic functions\nSeveral logistic selectivity functions reflecting different parameterizations are available, including the asclogistic, asclogistic1, asclogistic5095, and asclogistic50D95 functions. For each, consts[1] indicates the size at full selection if &gt; 0, that no rescaling will be done if = 0, or that the values should be normalized by the maximum if &lt; 0. Other elements of consts are ignored.\n\nAscending logistic (alternative 1)\nThe asclogistic function is parameterized by the size and width (1/slope) at 50% selected (Figure 1).\n\n\nWarning in fun(libname, pkgname): couldn't connect to display\n\"/private/tmp/com.apple.launchd.DRbboYkDtw/org.xquartz:0\"\n\n\n\n\n\n\n\n\nFigure 1: Ascending logistic function asclogistic (green dotted line) selectivity function parameterized by the size and slope at 50% selected. consts[1] represents the size at full selection if &gt; 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if &lt; 0. Here, params= (100,0.05) and consts = 125.\n\n\n\n\n\n\n\nAscending logistic (alternative 2)\nThe asclogistic1 function is parameterized by the size and width (1/slope) at 50% selected (Figure 2).\n\n\n\n\n\n\n\n\nFigure 2: Ascending logistic function asclogistic1 (green dotted line) selectivity function parameterized by the size and width (1/slope) at 50% selected. consts[1] represents the size at full selection if &gt; 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if &lt; 0. Here, params= (100,50) and consts = 125.\n\n\n\n\n\n\n\nAscending logistic (alternative 3)\nThe asclogistic5095 function is parameterized by the sizes at 50% and 95% selected (Figure 3).\n\n\n\n\n\n\n\n\nFigure 3: Ascending logistic function asclogistic5095 (green dotted line) parameterized by sizes at 50% and 95% selected. consts[1] represents the size at full selection if &gt; 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if &lt; 0. Here, params= (50,125) and consts = 0.\n\n\n\n\n\n\n\nAscending logistic (alternative 4)\nThe asclogistic50D95 function is parameterized by the size at 50% and the difference between the 95% and 50% selected sizes (Figure 4).\n\n\n\n\n\n\n\n\nFigure 4: Ascending logistic function asclogistic50D95 (green dotted line) parameterized by the size at 50% and the difference between the 95% and 50% selected sizes. Here, params= (50,75) and consts = 0.\n\n\n\n\n\n\n\n\nAscending normal functions\nSeveral functions can be used to define a selectivity curve using the ascending portion of a normal (gaussian) curve and a sill. An ascending normal selectivity curve has an advantage over a logistic curve in an AD setting because it achieves its maximum (1) at a finite size, whereas logistic functions only approach their maximum values asymptotically. Functions defined include: ascnormal1, ascnormal2, ascnormal2a, ascnormal2b, ascnormal3.\n\nAscending normal (alternative 1)\nThe ascnormal1 function is parameterized by the width of the ascending limb and the size at which it reaches 1 (Figure 5).\n\n\n\n\n\n\n\n\nFigure 5: Ascending normal function ascnormal1 (green dotted line) selectivity function parameterized by the width of the ascending limb and the size at which it reaches 1. consts is ignored, but must a dummy value must be given. Here, params= (25,100) and consts = 50.\n\n\n\n\n\n\n\nAscending normal (alternative 2)\nThe ascnormal2 function is parameterized by the value of selectivity at the reference size (refZ) and size at which ascending limb reaches 1 (Figure 6). refZ is specified by consts[1].\n\n\n\n\n\n\n\n\nFigure 6: Ascending normal function ascnormal2 (green dotted line) selectivity function parameterized by the value of selectivity at the reference size (refZ) and size at which ascending limb reaches 1. consts[1] = refZ. Here, params= (0.5,100) and consts (refZ) = 50.\n\n\n\n\n\n\n\nAscending normal (alternative 3)\nThe ascnormal2a function is parameterized by the size at which selectivity reaches refS and the size at which the ascending limb reaches 1 (Figure 7). consts[1] = refS, the reference selectivity.\n\n\n\n\n\n\n\n\nFigure 7: Ascending normal function ascnormal2a (green dotted line) parameterized by the size at which selectivity reaches refS and the size at which the ascending limb reaches 1. consts[1] = refS, the reference selectivity. Here, params= (50,100) and consts (refS) = 0.5.\n\n\n\n\n\n\n\nAscending normal (alternative 4)\nThe ascnormal2b function is parameterized by the size at which ascending limb reaches 1 and the delta from the size at 1 to size at which selectivity = refS (Figure 8). consts[1] = refS, the reference selectivity.\n\n\n\n\n\n\n\n\nFigure 8: Ascending normal function ascnormal2b (green dotted line) parameterized by the size at 50% and the difference between the 95% and 50% selected sizes. Here, params= (150,75) and consts (refS) = 0.5.\n\n\n\n\n\n\n\n\nDouble logistic functions\nSeveral functions can be used to define a “double logistic” selectivity curve, which consists of the ascending part of a logistic function, possibly followed by a sill over intermediate sizes, followed by the descending part of a reversed logistic function. The two normal functions are determined by the location of their modes, as well as their associated widths. These include: dbllogistic and dbllogistic5095.\n\n\nDouble logistic function (alternative 1)\nThe double logistic function dbllogistic is parameterized by the ascending limb size at which selectivity = 0.5, the ascending limb slope at 50% selected, the descending limb size at which selectivity = 0, and the descending limb size at 50% selected. consts[1] represents the size at full selection if &gt; 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if &lt; 0. An example is given in Figure 9.\n\n\n\n\n\n\n\n\nFigure 9: The double logistic function dbllogistic (green dotted line) is parameterized by the ascending limb size at which selectivity = 0.5, the ascending limb slope at 50% selected, the descending limb size at which selectivity = 0, and the descending limb size at 50% selected. Here, params= (50,0.5,125,0.5) and consts (refZ) = 0.\n\n\n\n\n\n\n\nDouble logistic function (alternative 2)\nThe double logistic function dbllogistic5095 is parameterized by the ascending limb size at 50% selected, the ascending limb size at 95% selected, the descending limb size at 95% selected, and the descending limb size at 50% selected. consts[1] represents the size at full selection if &gt; 0, indicates no rescaling if = 0, and indicates that the values should be normalized by the maximum if &lt; 0. An example is given in Figure 10.\n\n\n\n\n\n\n\n\nFigure 10: The double logistic function dbllogistic (green dotted line) is parameterized by the ascending limb size at 50% selected, the ascending limb size at 95% selected, the descending limb size at 95% selected, and the descending limb size at 50% selected. Here, params= (50,100,125,150) and consts (refZ) = 0.\n\n\n\n\n\n\n\nDouble normal functions\nSeveral functions can be used to define a “double normal” selectivity curve, which consists of the left half (i.e., increasing up to the mode) of a normal (gaussian) function, possibly followed by a sill over intermediate sizes, followed by the right half of a normal function. These include: dblnormal4, dblnormal4a, and dblnormal6.\n\n4-parameter double normal (alternative 1)\nThe 4-parameter double normal function dblnormal4 is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, the offset to size at which the descending limb departs from 1. The value of consts is ignored. An example is given in Figure 13.\n\n\n\n\n\n\n\n\nFigure 11: The 4-parameter double normal function dblnormal6 (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, the offset to size at which the descending limb departs from 1, and the width of descending limb. Here, params= (100,50,40,35) and consts (= refZ) = 0.\n\n\n\n\n\n\n\n4-parameter double normal (alternative 2)\nThe 4-parameter double normal function dblnormal4a is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, a scaled offset at which the descending limb departs from 1, and the width of descending limb. The value of consts is ignored. An example is given in Figure 12.\n\n\n\n\n\n\n\n\nFigure 12: The 4-parameter double normal function dblnormal4a (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, a scaled offset at which the descending limb departs from 1, and the width of descending limb. The value of consts is ignored. Here, params= (100,50,0.5,35) and consts (= refZ) = 0.\n\n\n\n\n\n\n\n6-parameter double normal\nThe 6-parameter double normal function dblnormal6 is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, size at which descending limb departs from 1, the width of descending limb, the floor of ascending limb, and the floor of descending limb. An example is given in Figure 13.\n\n\n\n\n\n\n\n\nFigure 13: The 6-parameter double normal function dblnormal6 (green dotted line) is parameterized by the size at which ascending limb reaches 1, the width of ascending limb, size at which descending limb departs from 1, the width of descending limb, the floor of ascending limb, and the floor of descending limb. Here, params= (100,50,125,35,0.1,0.1) and consts (= refZ) = 0.\n\n\n\n\n\n\n\n\nSplines\nTwo types of spline functions can be used to model selectivity: natural splines and clamped splines. Natural splines are cubic splines whose second derivatives are zero at the boundary knot locations, with the property that extrapolated values have a constant slope. Clamped splines are cubic splines whose first and second derivatives are zero at one or both boundary knot locations, with the property that extrapolated values are “clamped” to (the same as that at) the nearest boundary knot. Functions that represent splines clamped at both ends or at either end are available.\n\nNatural splines\nThe selSpline function, with signature (z,params,knots,debug=FALSE), is used to represent size-specific selectivity using a natural spline. params is a k-length advector representing the logit-scale values of the estimated selectivity curve at the k knots. The knot locations are given by the first k values of the consts vector. An example is given in Figure 14.\n\n\n\n\n\n\n\n\nFigure 14: The spline function selSpline (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying ‘true’ R function=blue). The solid green line represents the spline function fit to the ‘true’ values.\n\n\n\n\n\n\n\nClamped splines\nThe selSplineClmpd function, with signature (z,params,knots,debug=FALSE), is used to represent size-specific selectivity with a spline that is clamped (to different values) at both ends. params is a k-length advector representing the logit-scale values of the estimated selectivity curve at the k knots. The knot locations are given by the first k values of the consts vector. An example is given in Figure 15.\n\n\n\n\n\n\n\n\nFigure 15: The clamped spline function selSplineClmpd (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying ‘true’ R function=blue). The solid green line represents the spline function fit to the ‘true’ values.\n\n\n\n\n\n\nLeft-clamped splines\nThe selSplineClmpdLeft function, with signature (z,params,knots,debug=FALSE), is used to represent size-specific selectivity with a spline that is clamped at small sizes (i.e., the left end). params is a k-length advector representing the logit-scale values of the estimated selectivity curve at the k knots. The knot locations are given by the first k values of the consts vector. An example is given in Figure 16.\n\n\n\n\n\n\n\n\nFigure 16: Left-clamped spline function selSplineClmpdLeft (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying ‘true’ R function=blue). The solid green line represents the spline function fit to the ‘true’ values.\n\n\n\n\n\n\n\nRight-clamped splines\nThe selSplineClmpdRight function, with signature (z,params,knots,debug=FALSE), is used to represent size-specific selectivity with a spline that is clamped at large sizes (i.e., the right end). params is a k-length advector representing the logit-scale values of the estimated selectivity curve at the k knots. The knot locations are given by the first k values of the consts vector. An example is given in Figure 17.\n\n\n\n\n\n\n\n\nFigure 17: The right-clamped spline function selSplineClmpdRight (green dotted line) fit to a double normal selectivity function with additive noise (observed=red; underlying ‘true’ R function=blue). The solid green line represents the spline function fit to the ‘true’ values.\n\n\n\n\n\n\n\n\n\nOther selectivity functions\nMiscellaneous selectivity functions described in this section include: a constant function and a “stacked” logistic function.\n\nConstant selectivity\nThe const_sel function (Figure 18) is used to represent selectivity that is not size-specific (i.e.., the same at all sizes). It has a signature (z,params,consts) to match other functions, although consts is ignored (if consts[1] were used as a reference size, the function would be non-differentiable).\n\n\n\n\n\n\n\n\nFigure 18: Constant selectivity function (green dotted line) fit to a constant with additive noise (observed=red; underlying ‘true’ R function=blue). The solid green line represents the function fit to the ‘true’ values. Here, params = 1.\n\n\n\n\n\n\n\nStacked logistic\nThe stackedLogistic1 function (?@fig-StakedLogistic) provides a 5-parameter selectivity function that is formed using two ascending logistic curves, with one stacked atop the other. The function is parameterized by a weighting factor on the first curve (omega), the size at the inflection point of the first logistic curve (mnZ1), the width of the first logistic curve (sdZ1), the size at the inflection point of the second logistic curve (mnZ2), and the width of the second logistic curve (sdZ2). params is the vector (omega,mnZ1,sdZ1,mnZ2,sdZ2). The value of consts is ignored.\n\n\n\n\n\n\n\n\nFigure 19: The stacked logistic selectivity function (green dotted line) fit to a constant with additive noise (observed=red; underlying ‘true’ R function=blue). The solid green line represents the function fit to the ‘true’ values. Here, params = (0.2,75,10,145,10).",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-FM",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-FM",
    "title": "Model Functions and Parameters",
    "section": "Fishing mortality",
    "text": "Fishing mortality",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  },
  {
    "objectID": "website/04_FunctionsAndParametersSpecification.html#sec-Srv",
    "href": "website/04_FunctionsAndParametersSpecification.html#sec-Srv",
    "title": "Model Functions and Parameters",
    "section": "Survey catchability",
    "text": "Survey catchability",
    "crumbs": [
      "Functions and Parameters Specification"
    ]
  }
]